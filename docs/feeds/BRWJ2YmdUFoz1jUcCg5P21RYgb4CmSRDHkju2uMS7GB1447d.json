{"id":"BRWJ2YmdUFoz1jUcCg5P21RYgb4CmSRDHkju2uMS7GB1447d","title":"Mouse Vs Python","displayTitle":"Dev - Python Blog","url":"https://blog.pythonlibrary.org/feed","feedLink":"https://www.blog.pythonlibrary.org/","items":[{"title":"An Intro to pre-commit","url":"https://www.blog.pythonlibrary.org/2024/12/23/an-intro-to-pre-commit/","date":1734959382,"author":"Mike","unread":true,"desc":"","content":"<p>You can use many great tools to help you in your software development journey. One such tool is <a href=\"http://A framework for managing and maintaining multi-language pre-commit hooks\">pre-commit</a>, a framework for managing and maintaining multi-language <span class=\"text-nowrap\">pre-commit</span> hooks. You use pre-commit to run one or more tools before allowing you to commit your code locally. For example, you might run the Flake8 linter or the <a href=\"https://www.blog.pythonlibrary.org/2023/10/25/the-ruff-formatter-pythons-fastest-formatter/\">Ruff formatter</a> on your Python code in GitHub Actions or some other CI. But rather than waiting for CI to run, you want to run those checks locally and automatically.</p>\n<p>That is where pre-commit comes in. You tell pre-c0mmit what to run, and it will run right before it allows you to commit your code.If any of those checks fail, you must fix your code before committing it.</p>\n<h2>Installing pre-commit</h2>\n<p>pre-commit is a Python package, so you can install it using pip. Here&#8217;s the command you&#8217;ll need to run in your terminal:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pip install pre-commit</pre>\n<p>Once pre-commit is installed, you can confirm that it works by running the following:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pre-commit --version</pre>\n<h2>Adding the git Hooks</h2>\n<p>The next step is to navigate to one of your local GitHub code bases in your terminal. Once inside one of your repos, you will need to run this command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pre-commit install</pre>\n<p>This command installs pre-commit in your <code>.git\\hooks</code> folder so that pre-commit runs whenever you commit. But how does pre-commit know what to run?</p>\n<p>You have to define what <code>pre-commit</code> runs using a special YAML file. You&#8217;ll learn how in the next section!</p>\n<h2>Adding a pre-commit Configuration</h2>\n<p>You need to add a file named <strong>.pre-commit-config.yaml</strong> (note the leading period) into the root of your repo. If you want to generate a simple config file, you can run this command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pre-commit sample-config</pre>\n<p>Here&#8217;s an example config for running Black on your code:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n    -   id: check-yaml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n    -   id: black</pre>\n<p>Personally, I like to run the Ruff formatter and linter as well as a couple of defaults, so I use this config a lot:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.2.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-added-large-files\n\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  # Ruff version.\n  rev: v0.1.7\n  hooks:\n    # Run the linter.\n    - id: ruff\n    # Run the formatter.\n    - id: ruff-format\n</pre>\n<p>When you add a new rule to pre-commit, you should run that rule against all the files in your repo so you don&#8217;t have any surprises later on. To do that, you need to run this command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pre-commit run --all-files</pre>\n<p>Once you have run all your new rules against all your code files, you can start working on your next feature or bug fix. Then, when you run,  <code>git commit</code> the pre-commit hooks will run, and you&#8217;ll see if your code is good enough to pass.</p>\n<h2>Wrapping Up</h2>\n<p>There are TONs of hooks you can add to pre-commit. A lot of them are mentioned on the <a href=\"https://pre-commit.com/\">pre-commit website</a>. You can add Mypy, pytest, and much, much more to your pre-commit hooks. Just don&#8217;t get too crazy, or they may take too long to run, and you&#8217;ll go nuts waiting for it.</p>\n<p>Overall, running so many of your CI hooks locally is great because your machine is usually faster than waiting on a queue in CI. Give it a try and see what think!</p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/23/an-intro-to-pre-commit/\">An Intro to pre-commit</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"The Python Countdown to Christmas 2024 Giveaway","url":"https://www.blog.pythonlibrary.org/2024/12/16/the-python-countdown-to-christmas-2024-giveaway/","date":1734381710,"author":"Mike","unread":true,"desc":"","content":"<p>Happy Holidays and Merry Christmas from me to you! I have been giving away hundreds of Python books and courses for Christmas for the last couple of years!</p>\n<div style=\"width: 1200px;\" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-12512-1\" width=\"1200\" height=\"675\" loop=\"1\" autoplay=\"1\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/12/Countdown-to-christmas-1.mp4?_=1\" /><a href=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/12/Countdown-to-christmas-1.mp4\">https://www.blog.pythonlibrary.org/wp-content/uploads/2024/12/Countdown-to-christmas-1.mp4</a></video></div>\n<p>From now until Christmas, I will be giving away hundreds more. You can start learning Python for free using my books or courses.</p>\n<p>All you have to do is follow me on one of these platforms and watch out for my post that describes how to get a free book or course:</p>\n<ul>\n<li><a href=\"https://x.com/driscollis/\">X / Twitter</a></li>\n<li><a href=\"https://www.linkedin.com/in/driscollis/\">LinkedIn</a></li>\n<li><a href=\"https://mastodon.social/@driscollis\">Mastodon</a></li>\n<li><a href=\"https://www.threads.net/@driscollis\">Threads</a></li>\n<li><a href=\"https://bsky.app/profile/teachmepython\">BlueSky</a></li>\n</ul>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/16/the-python-countdown-to-christmas-2024-giveaway/\">The Python Countdown to Christmas 2024 Giveaway</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/12/Countdown-to-christmas-1.mp4","enclosureMime":""},{"title":"Checking Python Code with GitHub Actions","url":"https://www.blog.pythonlibrary.org/2024/12/10/checking-python-code-with-github-actions/","date":1733837140,"author":"Mike","unread":true,"desc":"","content":"<p>When you are working on your personal or work projects in Python, you usually want to have a way to enforce code standards. You can use tools like Flake8, PyLint or Ruff to lint your code. You might use Mypy to verify type checking. There are lots of other tools at your disposal. But it can be hard to remember to do that every time you want to create a pull request (PR) in GitHub or GitLab.</p>\n<p>That is where continuous integration (CI) tools come in. GitHub has something called GitHub Actions that allow you to run tools or entire workflows on certain types of events.</p>\n<p>In this article, you will learn how to create a <a href=\"https://github.com/features/actions\">GitHub Action</a> that runs Ruff on a PR. You can learn more about Ruff in my <a href=\"https://www.blog.pythonlibrary.org/2023/06/28/an-intro-to-ruff-an-extremely-fast-python-linter/\">introductory article</a>.</p>\n<h2>Creating a Workflow</h2>\n<p>In the root folder of your code, you will need to create a folder called <strong>.github/workflows</strong>. Note the period at the beginning and the fact that you need a subfolder named <strong>workflows</strong> too. Inside of that, you will create a YAML file.</p>\n<p>Since you are going to run Ruff to lint and format your Python files, you can call this YAML file <strong>ruff.yml. </strong>Put the following in your new file:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">name: Ruff\non: [workflow_dispatch, pull_request]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.13\"\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install ruff\n      # Include `--format=github` to enable automatic inline annotations.\n      - name: Run Ruff\n        run: ruff check --output-format=github .\n        continue-on-error: false\n      - name: Run Ruff format\n        run: ruff format --check .\n        continue-on-error: false</pre>\n<p>Note: This example comes from my <a href=\"https://github.com/driscollis/textual-cogs/blob/main/.github/workflows/ruff.yml\">textual-cogs repo</a></p>\n<p>Let&#8217;s talk about what this does. This line is pretty important:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">on: [workflow_dispatch, pull_request]</pre>\n<p>It tells GitHub to run this workflow when there&#8217;s a pull request and also with &#8220;workflow_dispatch&#8221;. That second option lets you go to the <strong>Actions</strong> tab in your GitHub repo, select the workflow and run it manually. If you do not include that, you cannot run it manually at all. This is useful for testing purposes, but you can remove it if you do not need it.</p>\n<p>The next part tells GitHub to run the build on ubuntu-linux:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">jobs:\n  build:\n    runs-on: ubuntu-latest</pre>\n<p>If you have a GitHub subscription, you can also get Windows as a runner, which means that you can also run these actions on Windows in addition to Linux.</p>\n<p>The steps section is the meat of this particular workflow:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">steps:\n  - uses: actions/checkout@v4\n  - name: Install Python\n    uses: actions/setup-python@v4\n    with:\n      python-version: \"3.13\"\n  - name: Install dependencies\n    run: |\n      python -m pip install --upgrade pip\n      pip install ruff\n  # Include `--format=github` to enable automatic inline annotations.\n  - name: Run Ruff\n    run: ruff check --output-format=github .\n    continue-on-error: false\n  - name: Run Ruff format\n    run: ruff format --check .\n    continue-on-error: false</pre>\n<p>Here is uses a built-in <a href=\"https://github.com/actions/checkout\">checkout@v4 workflow</a>, which is something that comes with GitHub. There are many others you can use to enhance your workflows and add new functionality. Next, you get setup with Python 3.13 and then you install your dependencies.</p>\n<p>Once your dependencies are installed, you can run your tools. In this case, you are installing and running Ruff. For every PR, you run <code>ruff check --output-format=github .</code>, which will do all sorts of linting on your Python code. If any errors are found, it will add inline comments with the error, which is what that <code>--output-format</code> flag is for.</p>\n<p>You also have a separate section to run Ruff format, which will format your code to follow the <a href=\"https://github.com/psf/black\">Black</a> formatter (for the most part).</p>\n<h2>Wrapping Up</h2>\n<p>You can add lots of other tools to your workflows too. For example, you might add a Mypy workflow, or some test workflows to run on PR or perhaps before merging to your main branch. You might even want to check your <a href=\"https://www.blog.pythonlibrary.org/2023/09/20/learning-about-code-metrics-in-python-with-radon/\">code complexity</a> before allowing a merge too!</p>\n<p>With a little work, you will soon be able to use GitHub Actions to keep your code cleaner and make it more uniform too. Adding automated testing is even better! Give it a try and let me know what you think.</p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/10/checking-python-code-with-github-actions/\">Checking Python Code with GitHub Actions</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"JupyterLab 101 Book is Now Available","url":"https://www.blog.pythonlibrary.org/2024/12/09/jupyterlab-101-book-is-now-available/","date":1733751078,"author":"Mike","unread":true,"desc":"","content":"<p>JupyterLab, the latest iteration of the Jupyter Notebook, is a versatile tool that empowers you to share your code in an easily understandable format.</p>\n<figure id=\"attachment_12441\" aria-describedby=\"caption-attachment-12441\" style=\"width: 1024px\" class=\"wp-caption aligncenter\"><a href=\"https://www.amazon.com/dp/B0DMFJWSJN\"><img fetchpriority=\"high\" decoding=\"async\" class=\"size-large wp-image-12441\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1024x768.jpg\" alt=\"\" width=\"1024\" height=\"768\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1024x768.jpg 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-300x225.jpg 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-768x576.jpg 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1536x1152.jpg 1536w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-2048x1536.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><figcaption id=\"caption-attachment-12441\" class=\"wp-caption-text\">Front View Two Hard Cover Book Psd Mockup</figcaption></figure>\n<p>Hundreds of thousands of people around the world use Jupyter Notebooks or variations of the Notebook architecture for any or all of the following:</p>\n<ul class=\"a-unordered-list a-vertical\">\n<li><span class=\"a-list-item\">teaching</span></li>\n<li><span class=\"a-list-item\">presentations</span></li>\n<li><span class=\"a-list-item\">learning a computer language</span></li>\n<li><span class=\"a-list-item\">numerical simulations</span></li>\n<li><span class=\"a-list-item\">statistical modeling</span></li>\n<li><span class=\"a-list-item\">data visualization</span></li>\n<li><span class=\"a-list-item\">machine learning</span></li>\n<li><span class=\"a-list-item\">and much more!</span></li>\n</ul>\n<p>Jupyter Notebooks can be emailed, put on GitHub, or run online. You may also add HTML, images, Markdown, videos, LaTeX, and custom MIME types to your Notebooks. Finally, Jupyter Notebooks support big data integration.</p>\n<p>JupyterLab 101 will get you up to speed on the newest user interface for Jupyter Notebooks and the other tools that JupyterLab supports. You now have a tabbed interface that you can use to edit multiple Notebooks, open terminals in your browser, create a Python REPL, and more. JupyterLab also includes a debugger utility to help you figure out your coding issues.</p>\n<p>Rest assured, JupyterLab supports all the same programming languages as Jupyter Notebook. The main difference lies in the user interface, and this guide is here to help you navigate it effectively and efficiently.</p>\n<p>After reading JupyterLab 101, you will be an expert in JupyterLab and produce quality Notebooks quickly!</p>\n<h2>Where to Purchase</h2>\n<p>Purchase on <a href=\"https://driscollis.gumroad.com/l/jupyterlab101\">Gumroad</a>, <a href=\"https://leanpub.com/jupyterlab101/\">Leanpub</a> or <a href=\"https://www.amazon.com/dp/B0DMFJWSJN\">Amazon</a></p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/09/jupyterlab-101-book-is-now-available/\">JupyterLab 101 Book is Now Available</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""}]}
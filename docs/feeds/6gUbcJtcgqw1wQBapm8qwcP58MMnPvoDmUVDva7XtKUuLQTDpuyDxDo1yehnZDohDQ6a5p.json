{"id":"6gUbcJtcgqw1wQBapm8qwcP58MMnPvoDmUVDva7XtKUuLQTDpuyDxDo1yehnZDohDQ6a5p","title":"Slashdot: Developers","displayTitle":"Dev - Slashdot - Dev","url":"http://rss.slashdot.org/Slashdot/slashdotDevelopers","feedLink":"https://developers.slashdot.org/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":15,"items":[{"title":"'Vibe Coding' is Letting 10 Engineers Do the Work of a Team of 50 To 100, Says YC CEO","url":"https://developers.slashdot.org/story/25/03/18/1428226/vibe-coding-is-letting-10-engineers-do-the-work-of-a-team-of-50-to-100-says-yc-ceo?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1742308800,"author":"msmash","guid":261,"unread":true,"content":"Y Combinator CEO Garry Tan said startups are reaching $1-10 million annual revenue with fewer than 10 employees due to \"vibe coding,\" a term coined by OpenAI cofounder Andrej Karpathy in February. \n\n\"You can just talk to the large language models and they will code entire apps,\" Tan told CNBC (video). \"You don't have to hire someone to do it, you just talk directly to the large language model that wrote it and it'll fix it for you.\" What would've once taken \"50 or 100\" engineers to build, he believes can now be accomplished by a team of 10, \"when they are fully vibe coders.\" He adds: \"When they are actually really, really good at using the cutting edge tools for code gen today, like Cursor or Windsurf, they will literally do the work of 10 or 100 engineers in the course of a single day.\" \n\nAccording to Tan, 81% of Y Combinator's current startup batch consists of AI companies, with 25% having 95% of their code written by large language models. Despite limitations in debugging capabilities, Tan said the technology enables small teams to perform work previously requiring dozens of engineers and makes previously overlooked niche markets viable for software businesses.","contentLength":1182,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Sobering Revenue Stats of 70K Mobile Apps Show Why Devs Beg For Subscriptions","url":"https://developers.slashdot.org/story/25/03/17/1946256/sobering-revenue-stats-of-70k-mobile-apps-show-why-devs-beg-for-subscriptions?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1742244120,"author":"msmash","guid":260,"unread":true,"content":"Most mobile apps fail to reach $1,000 in monthly revenue within their first two years, according to a new report from RevenueCat examining data from over 75,000 mobile apps. Across all categories, only about 20% of apps achieve the $1,000 threshold, while just 5% reach $10,000 monthly. \n\nIn 2025, the top 5% of apps generate 500 times more revenue than the remaining 95% -- up from 200 times in 2024. After one year, elite performers in gaming, photo and video, health and fitness, and social categories exceed $5,000 monthly, while those in the 25th percentile earn a meager $5-20 per month. The report also highlights North American developers' heavy iOS dependence, with 76.1% making over 80% of their revenue from Apple's platform. Subscription retention presents another challenge, with barely 10% of monthly subscribers staying beyond the first year.","contentLength":857,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Codon Python Compiler Gets Faster - and Changes to Apache 2 License","url":"https://developers.slashdot.org/story/25/03/16/003225/codon-python-compiler-gets-faster---and-changes-to-apache-2-license?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1742139240,"author":"EditorDavid","guid":259,"unread":true,"content":"Slashdot reader rikfarrow summarizes an article they wrote for Usenix.org about the Open Source Python compiler Codon:\n\n In 2023 I tried out Codon. At the time I had difficulty compiling the scripts I most commonly used, but was excited by the prospect. Python is essentially single threaded and checks the shape (type) of each variable as it interprets scripts. Codon fixes types and compiles Python into compact, executable binaries that execute much faster. \n\nSeveral things have changed with their latest release: I have successful compiles, the committers have added a compiled version of NumPy (high performance math algorithms), and changed their open source license to Apache 2. \n\n\"The other big news is that Exaloop, the company that is behind Codon, has changed their license to Apache 2...\" according to the article, so \"commercial use and derivations of Codon are now permitted without licensing.\"","contentLength":909,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why Microsoft's Developers are Porting TypeScript to Go","url":"https://developers.slashdot.org/story/25/03/15/0233243/why-microsofts-developers-are-porting-typescript-to-go?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1742052840,"author":"EditorDavid","guid":258,"unread":true,"content":"Tuesday Microsoft \"surprised everyone,\" writes Neowin, \"by announcing a new change that will radically improve TypeScript performance\" — porting TypeScript to Go. \n\nInfoWorld writes that \"The initiative promises dramatic improvements in editor startup speed, build times, and memory usage, making it easier to scale TypeScript to large code bases, Microsoft said.\"\n\nMicrosoft's TypeScript team expects to be able to preview command-line type-checking in Go-based tsc by mid-2025, and to deliver a feature-complete Go implementation of TypeScript by the end of the year. [You can build and run the Go code now from Microsoft's new working repository.]\n Developers who use Go-based TypeScript in the Visual Studio Code editor will feel the increased speed in the editor, Microsoft said. The company promises an 8x improvement in project load times, instant comprehensive error listings across entire projects, and greater responsiveness for all language service operations including completion lists, quick information, go to definition, and find all references. The new TypeScript will also support more advanced refactoring and deeper insights that were previously too expensive to compute, the company said. \n\nMicrosoft believes native Go implementations reduce build times by up to 10x, notes Neowin. But \"Developers can expect TypeScript 6.0 to have some deprecations and breaking changes to support the upcoming Go-based version.\"\n\nLater this year, Microsoft will be releasing this new native Go implementation as TypeScript 7.0. The current JS-based TypeScript codebase will continue development into the 6.x series until TypeScript 7+ reaches sufficient maturity and adoption, since some projects may depend on certain API features, legacy configurations, or other things that are not supported by TypeScript 7+. \nTypeScript's original creator Anders Hejlsberg recorded an announcement video — and also shared his thoughts in a GitHub discussion titled simply... \"Why Go?\"\nThe TypeScript compiler's move to Go was influenced by specific technical requirements, such as the need for structural compatibility with the existing JavaScript-based codebase, ease of memory management, and the ability to handle complex graph processing efficiently. After evaluating numerous languages and making multiple prototypes — including in C# — Go emerged as the optimal choice... \nLet's be real. Microsoft using Go to write a compiler for TypeScript wouldn't have been possible or conceivable in years past. However, over the last few decades, we've seen Microsoft's strong and ongoing commitment to open-source software, prioritizing developer productivity and community collaboration above all. Our goal is to empower developers with the best tools available, unencumbered by internal politics or narrow constraints. This freedom to choose the right tool for each specific job ultimately benefits the entire developer community, driving innovation, efficiency, and improved outcomes. And you can't argue with a 10x outcome! \n\nHejlsberg also addressed their choice of Go in an online interview with the Michigan TypeScript meetup.","contentLength":3131,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"JPMorgan Engineers' Efficiency Jumps as Much as 20% From Using Coding Assistant","url":"https://developers.slashdot.org/story/25/03/14/2020232/jpmorgan-engineers-efficiency-jumps-as-much-as-20-from-using-coding-assistant?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741983600,"author":"msmash","guid":257,"unread":true,"content":"Tens of thousands of JPMorgan Chase software engineers increased their productivity 10% to 20% by using a coding assistant tool developed by the bank, its global chief information officer Lori Beer said. From a report: The gains present \"a great opportunity\" for the lender to assign its engineers to other projects, Beer told Reuters ahead of DevUp, an internal conference hosted by JPMorgan, bringing together its top engineers in India this year. The largest lender in the U.S. had a technology budget of $17 billion for 2024. Its tech workforce of 63,000 employees, with a third of them based in India, represents about 21% of its global headcount. The efficiency gains from the coding assistant will also allow JPMorgan's engineers to devote more time to high-value projects focusing on artificial intelligence and data, Beer said.","contentLength":836,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AI Coding Assistant Refuses To Write Code, Tells User To Learn Programming Instead","url":"https://developers.slashdot.org/story/25/03/13/2349245/ai-coding-assistant-refuses-to-write-code-tells-user-to-learn-programming-instead?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741957200,"author":"BeauHD","guid":256,"unread":true,"content":"An anonymous reader quotes a report from Ars Technica: On Saturday, a developer using Cursor AI for a racing game project hit an unexpected roadblock when the programming assistant abruptly refused to continue generating code, instead offering some unsolicited career advice. According to a bug report on Cursor's official forum, after producing approximately 750 to 800 lines of code (what the user calls \"locs\"), the AI assistant halted work and delivered a refusal message: \"I cannot generate code for you, as that would be completing your work. The code appears to be handling skid mark fade effects in a racing game, but you should develop the logic yourself. This ensures you understand the system and can maintain it properly.\"\n \nThe AI didn't stop at merely refusing -- it offered a paternalistic justification for its decision, stating that \"Generating code for others can lead to dependency and reduced learning opportunities.\" [...] The developer who encountered this refusal, posting under the username \"janswist,\" expressed frustration at hitting this limitation after \"just 1h of vibe coding\" with the Pro Trial version. \"Not sure if LLMs know what they are for (lol), but doesn't matter as much as a fact that I can't go through 800 locs,\" the developer wrote. \"Anyone had similar issue? It's really limiting at this point and I got here after just 1h of vibe coding.\" One forum member replied, \"never saw something like that, i have 3 files with 1500+ loc in my codebase (still waiting for a refactoring) and never experienced such thing.\"\n \nCursor AI's abrupt refusal represents an ironic twist in the rise of \"vibe coding\" -- a term coined by Andrej Karpathy that describes when developers use AI tools to generate code based on natural language descriptions without fully understanding how it works. While vibe coding prioritizes speed and experimentation by having users simply describe what they want and accept AI suggestions, Cursor's philosophical pushback seems to directly challenge the effortless \"vibes-based\" workflow its users have come to expect from modern AI coding assistants.","contentLength":2110,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"IBM CEO Doesn't Think AI Will Replace Programmers Anytime Soon","url":"https://developers.slashdot.org/story/25/03/12/1448242/ibm-ceo-doesnt-think-ai-will-replace-programmers-anytime-soon?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741795200,"author":"msmash","guid":255,"unread":true,"content":"IBM CEO Arvind Krishna has publicly disagreed with Anthropic CEO Dario Amodei's prediction that AI will write 90% of code within 3-6 months, estimating instead that only \"20-30% of code could get written by AI.\" \n\n\"Are there some really simple use cases? Yes, but there's an equally complicated number of ones where it's going to be zero,\" Krishna said during an onstage interview at SXSW. He argued AI will boost programmer productivity rather than eliminate jobs. \"If you can do 30% more code with the same number of people, are you going to get more code written or less?\" he asked. \"History has shown that the most productive company gains market share, and then you can produce more products.\"","contentLength":698,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"OpenAI Pushes AI Agent Capabilities With New Developer API","url":"https://developers.slashdot.org/story/25/03/11/2154229/openai-pushes-ai-agent-capabilities-with-new-developer-api?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741750200,"author":"BeauHD","guid":254,"unread":true,"content":"An anonymous reader quotes a report from Ars Technica: On Tuesday, OpenAI unveiled a new \"Responses API\" designed to help software developers create AI agents that can perform tasks independently using the company's AI models. The Responses API will eventually replace the current Assistants API, which OpenAI plans to retire in the first half of 2026. With the new offering, users can develop custom AI agents that scan company files with a file search utility that rapidly checks company databases (with OpenAI promising not to train its models on these files) and navigate websites -- similar to functions available through OpenAI's Operator agent, whose underlying Computer-Using Agent (CUA) model developers can also access to enable automation of tasks like data entry and other operations.\n \nHowever, OpenAI acknowledges that its CUA model is not yet reliable for automating tasks on operating systems and can make unintended mistakes. The company describes the new API as an early iteration that it will continue to improve over time. Developers using the Responses API can access the same models that power ChatGPT Search: GPT-4o search and GPT-4o mini search. These models can browse the web to answer questions and cite sources in their responses. That's notable because OpenAI says the added web search ability dramatically improves the factual accuracy of its AI models. On OpenAI's SimpleQA benchmark, which aims to measure confabulation rate, GPT-4o search scored 90 percent, while GPT-4o mini search achieved 88 percent -- both substantially outperforming the larger GPT-4.5 model without search, which scored 63 percent.\n \nDespite these improvements, the technology still has significant limitations. Aside from issues with CUA properly navigating websites, the improved search capability doesn't completely solve the problem of AI confabulations, with GPT-4o search still making factual mistakes 10 percent of the time. Alongside the Responses API, OpenAI released the open source Agents SDK, providing developers free tools to integrate models with internal systems, implement safeguards, and monitor agent activities. This toolkit follows OpenAI's earlier release of Swarm, a framework for orchestrating multiple agents.","contentLength":2240,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Developer Convicted For 'Kill Switch' Code Activated Upon His Termination","url":"https://developers.slashdot.org/story/25/03/10/1921202/developer-convicted-for-kill-switch-code-activated-upon-his-termination?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741635000,"author":"msmash","guid":253,"unread":true,"content":"A 55-year-old software developer faces up to 10 years in prison after being convicted for deploying malicious code that sabotaged his former employer's network, causing hundreds of thousands of dollars in losses. \n\nDavis Lu was convicted by a jury for causing intentional damage to protected computers owned by power management company Eaton Corp., the US Department of Justice announced Friday. Lu, who worked at Eaton for 11 years, became disgruntled after a 2018 corporate \"realignment\" reduced his responsibilities. \n\nHe created malicious code that deleted coworker profile files, prevented logins, and caused system crashes. His most destructive creation was a \"kill switch\" named \"IsDLEnabledinAD\" that automatically activated upon his termination in 2019, disrupting Eaton's global operations. Lu admitted to creating some malicious code but plans to appeal the verdict.","contentLength":877,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Adafruit Successfully Automates Arduino Development Using 'Claude Code' LLM","url":"https://hardware.slashdot.org/story/25/03/10/0054257/adafruit-successfully-automates-arduino-development-using-claude-code-llm?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1741568340,"author":"EditorDavid","guid":252,"unread":true,"content":"Adafruit Industries used large language model (LLM) tool Claude Code to streamline hardware development, writes managing director ptorrone. \n\nIn a demo video Limor 'Ladyada' Fried compares the LLM's command-line interface to working with the build-automation tool CMake or \"a weird cross between IRC and a BBS.\" The first step was converting a PDF of the hardware's datasheet into text, and Claude Code first displays the appropriate Bash command, while asking \"Do you want to proceed?\" (\"What's nice is that it doesn't make changes, even though it has write access to files in the directory...\") Eventually from the data sheet it creates things like an accurate register map, C++ headers, and even license text — and more. \n\n\"We are using it to automate parts of the coding and debugging process for an Arduino-compatible Metro Mini board with an OPT 4048 color sensor,\" writes ptorrone:\nUsing Claude Code's shell access, we can compile, upload, and test code in a semi-automated workflow, allowing the LLM to suggest fixes for errors along the way... While the AI isn't perfect for high-level driver development, it's proving VERY useful for tedious debugging and super-fast iterative improvements, bringing hardware automation closer to ...reality. \nIn the video Fried describes it like this. \"I have a full debugging cycle, where I'm there — I'm like driving the car — but I have this copilot that's telling me where to go...\" \n\n\"I feel like I'm getting closer to having a semi-automated way of doing driver development.\"","contentLength":1531,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Can TrapC Fix C and C++ Memory Safety Issues?","url":"https://developers.slashdot.org/story/25/03/03/0654205/can-trapc-fix-c-and-c-memory-safety-issues?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1740990840,"author":"EditorDavid","guid":251,"unread":true,"content":"\"TrapC, a fork of the C language, is being developed as a potential solution for memory safety issues that have hindered the C and C++ languages,\" reports InfoWorld. \nBut also being developed is a compiler named trapc \"intended to be implemented as a cybersecurity compiler for C and C++ code, said developer Robin Rowe...\"\n\n Due by the end of this year, trapc will be a free, open source compiler similar to Clang... Rowe said. TrapC has pointers that are memory-safe, addressing the memory safety issue with the two languages. With TrapC, developers write in C or C++ and compile in TrapC, for memory safety... \nRowe presented TrapC at an ISO C meeting this week. Developers can download a TrapC whitepaper and offer Rowe feedback. According to the whitepaper, TrapC's memory management is automatic and cannot leak memory. Pointers are lifetime-managed, not garbage-collected. Also, TrapC reuses a few code safety features from C++, notably member functions, constructors, destructors, and the new keyword. \n\n\"TrapC Memory Safe Pointers will not buffer overrun and will not segfault,\" Rowe told the ISO C Committee standards body meeting, according to the Register. \"When C code is compiled using a TrapC compiler, all pointers become Memory Safe Pointers and are checked.\"\n \nIn short, TrapC \"is a programming language forked from C, with changes to make it LangSec and Memory Safe,\" according to that white paper. \"To accomplish that, TrapC seeks to eliminate all Undefined Behavior in the C programming language...\" \n\n\"The startup TRASEC and the non-profit Fountain Abode have a TrapC compiler in development, called trapc,\" the whitepaper adds, and their mission is \"to enable recompiling legacy C code into executables that are safe by design and secure by default, without needing much code refactoring... The TRASEC trapc cybersecurity compiler with AI code reasoning is expected to release as free open source software sometime in 2025.\" \n\nIn November the Register offered some background on the origins of TrapC...\n","contentLength":2026,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Malicious PyPI Package Exploited Deezer's API, Orchestrates a Distributed Piracy Operation","url":"https://yro.slashdot.org/story/25/03/02/064255/malicious-pypi-package-exploited-deezers-api-orchestrates-a-distributed-piracy-operation?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1740914400,"author":"EditorDavid","guid":250,"unread":true,"content":"A malicious PyPi package effectively turned its users' systems \"into an illicit network for facilitating bulk music downloads,\" writes The Hacker News. \n\nThough the package has been removed from PyPI, researchers at security platform Socket.dev say it enabled \"coordinated, unauthorized music downloads from Deezer — a popular streaming service founded in France in 2007.\"\n\nAlthough automslc, which has been downloaded over 100,000 times, purports to offer music automation and metadata retrieval, it covertly bypasses Deezer's access restrictions... The package is designed to log into Deezer, harvest track metadata, request full-length streaming URLs, and download complete audio files in clear violation of Deezer's API terms... [I]t orchestrates a distributed piracy operation by leveraging both user-supplied and hardcoded Deezer credentials to create sessions with Deezer's API. This approach enables full access to track metadata and the decryption tokens required to generate full-length track URLs. \n\nAdditionally, the package routinely communicates with a remote server... to update download statuses and submit metadata, thereby centralizing control and allowing the threat actor to monitor and coordinate the distributed downloading operation. In doing so, automslc exposes critical track details — including Deezer IDs, International Standard Recording Codes, track titles, and internal tokens like MD5_ORIGIN (a hash used in generating decryption URLs) — which, when collected en masse, can be used to reassemble full track URLs and facilitate unauthorized downloads... \n\nEven if a user pays for access to the service, the content is licensed, not owned. The automslc package circumvents licensing restrictions by enabling downloads and potential redistribution, which is outside the bounds of fair use... \n\"The malicious package was initially published in 2019, and its popularity (over 100,000 downloads) indicates wide distribution...\"","contentLength":1959,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"27-Year-Old EXE Became Python In Minutes. Is AI-Assisted Reverse Engineering Next?","url":"https://developers.slashdot.org/story/25/03/01/2211210/27-year-old-exe-became-python-in-minutes-is-ai-assisted-reverse-engineering-next?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1740890040,"author":"EditorDavid","guid":249,"unread":true,"content":"Adafruit managing director Phillip Torrone (also long-time Slashdot reader ptorrone) shared an interesting blog post. They'd spotted a Reddit post \"detailing how someone took a 27-year-old visual basic EXE file, fed it to Claude 3.7, and watched as it reverse-engineered the program and rewrote it in Python.\"\n\nIt was an old Visual Basic 4 program they had written in 1997. Running a VB4 exe in 2024 can be a real yak-shaving compatibility nightmare, chasing down outdated DLLs and messy workarounds. So! OP decided to upload the exe to Claude 3.7 with this request: \n\"Can you tell me how to get this file running? It'd be nice to convert it to Python.\"&gt; \nClaude 3.7 analyzed the binary, extracted the VB 'tokens' (VB is not a fully-machine-code-compiled language which makes this task a lot easier than something from C/C++), identified UI elements, and even extracted sound files. Then, it generated a complete Python equivalent using Pygame. According to the author, the code worked on the first try and the entire process took less than five minutes... \nTorrone speculates on what this might mean. \"Old business applications and games could be modernized without needing the original source code... Tools like Claude might make decompilation and software archaeology a lot easier: proprietary binaries from dead platforms could get a new life in open-source too.\" \n\nAnd maybe Archive.org could even add an LLM \"to do this on the fly!\"","contentLength":1438,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Perl's CPAN Security Group is Now a CNA, Can Assign CVEs","url":"https://developers.slashdot.org/story/25/03/01/0548217/perls-cpan-security-group-is-now-a-cna-can-assign-cves?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1740857640,"author":"EditorDavid","guid":248,"unread":true,"content":"Active since 1995, the Comprehensive Perl Archive Network (or CPAN) hosts 221,742 Perl modules written by 14,548 authors. This week they announced that the CPAN Security Group \"was authorized by the CVE Program as a CVE Numbering Authority (CNA)\" to assign and manage CVE vulnerability identifications for Perl and CPAN Modules. \n\n\"This is great news!\" posted Linux kernel maintainer Greg Kroah-Hartman on social media, saying the announcement came \"Just in time for my talk about this very topic in a few weeks about how all open source projects should be doing this\" at the Linux Foundation Member Summit in Napa, California. And Curl creator Daniel Stenberg posted \"I'm with Greg Kroah-Hartman on this: all Open Source projects should become CNAs. Or team up with others to do it.\" (Also posting \"Agreed\" to the suggestion was Seth Larson, the Python Software Foundation's security developer-in-residence involved in their successful effort to become a CNA in 2023.) \n\n444 CNAs have now partnered with the CVE Program, according to their official web site. The announcement from PerlMonks.org:\n\nYears ago, a few people decided during the Perl Toolchain Summit (PTS) that it would be a good idea to join forces, ideas and knowledge and start a group to monitor vulnerabilities in the complete Perl ecosystem from core to the smallest CPAN release. The goal was to follow legislation and CVE reports, and help authors in taking actions on not being vulnerable anymore. That group has grown stable over the past years and is now known as CPANSec. \n\nThe group has several focus areas, and one of them is channeling CVE vulnerability issues. In that specific goal, a milestone has been reached: CPANSec has just been authorized as a CVE Numbering Authority (CNA) for Perl and modules on CPAN\n","contentLength":1790,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Google Calls for Measurable Memory-Safety Standards for Software","url":"https://developers.slashdot.org/story/25/02/28/0340214/google-calls-for-measurable-memory-safety-standards-for-software?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1740843240,"author":"EditorDavid","guid":247,"unread":true,"content":"Memory safety bugs are \"eroding trust in technology and costing billions,\" argues a new post on Google's security blog — adding that \"traditional approaches, like code auditing, fuzzing, and exploit mitigations — while helpful — haven't been enough to stem the tide.\" \n\nSo the blog post calls for a \"common framework\" for \"defining specific, measurable criteria for achieving different levels of memory safety assurance.\" The hope is this gives policy makers \"the technical foundation to craft effective policy initiatives and incentives promoting memory safety\" leading to \"a market in which vendors are incentivized to invest in memory safety.\" (\"Customers will be empowered to recognize, demand, and reward safety.\") \n\nIn January the same Google security researchers helped co-write an article noting there are now strong memory-safety \"research technologies\" that are sufficiently mature: memory-safe languages (including \"safer language subsets like Safe Buffers for C++\"), mathematically rigorous formal verification, software compartmentalization, and hardware and software protections. (With hardware protections including things like ARM's Memory Tagging Extension and the (Capability Hardware Enhanced RISC Instructions, or \"CHERI\", architecture.) Google's security researchers are now calling for \"a blueprint for a memory-safe future\" — though Importantly, the idea is \"defining the desired outcomes rather than locking ourselves into specific technologies.\" \n\nTheir blog post this week again urges a practical/actionable framework that's commonly understood, but one that supports different approaches (and allowing tailoring to specific needs) while enabling objective assessment:\n\nAt Google, we're not just advocating for standardization and a memory-safe future, we're actively working to build it. We are collaborating with industry and academic partners to develop potential standards, and our joint authorship of the recent CACM call-to-action marks an important first step in this process... This commitment is also reflected in our internal efforts. We are prioritizing memory-safe languages, and have already seen significant reductions in vulnerabilities by adopting languages like Rust in combination with existing, wide-spread usage of Java, Kotlin, and Go where performance constraints permit. We recognize that a complete transition to those languages will take time. That's why we're also investing in techniques to improve the safety of our existing C++ codebase by design, such as deploying hardened libc++. \n\nThis effort isn't about picking winners or dictating solutions. It's about creating a level playing field, empowering informed decision-making, and driving a virtuous cycle of security improvement... The journey towards memory safety requires a collective commitment to standardization. We need to build a future where memory safety is not an afterthought but a foundational principle, a future where the next generation inherits a digital world that is secure by design. \nThe security researchers' post calls for \"a collective commitment\" to eliminate memory-safety bugs, \"anchored on secure-by-design practices...\" One of the blog post's subheadings? \"Let's build a memory-safe future together.\" \n\nAnd they're urging changes \"not just for ourselves but for the generations that follow.\"","contentLength":3336,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}
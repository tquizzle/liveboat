{"id":"AXJnNj1p7gNGHeShbM5NH2qrEU51AXyHm","title":"Julia Evans","displayTitle":"Dev - Julia Evans","url":"https://jvns.ca/atom.xml","feedLink":"https://jvns.ca/atom.xml","items":[{"title":"\"Rules\" that terminal programs follow","url":"https://jvns.ca/blog/2024/11/26/terminal-rules/","date":1733995702,"author":"Julia Evans","unread":true,"desc":"","content":"<p>Recently I&rsquo;ve been thinking about how everything that happens in the terminal\nis some combination of:</p>\n<ol>\n<li>Your <strong>operating system</strong>&rsquo;s job</li>\n<li>Your <strong>shell</strong>&rsquo;s job</li>\n<li>Your <strong>terminal emulator</strong>&rsquo;s job</li>\n<li>The job of <strong>whatever program you happen to be running</strong> (like <code>top</code> or <code>vim</code> or <code>cat</code>)</li>\n</ol>\n<p>The first three (your operating system, shell, and terminal emulator) are all kind of\nknown quantities &ndash; if you&rsquo;re using bash in GNOME Terminal on Linux, you can\nmore or less reason about how how all of those things interact, and some of\ntheir behaviour is standardized by POSIX.</p>\n<p>But the fourth one (&ldquo;whatever program you happen to be running&rdquo;) feels like it\ncould do ANYTHING. How are you supposed to know how a program is going to\nbehave?</p>\n<p>This post is kind of long so here&rsquo;s a quick table of contents:</p>\n<ul>\n<li><a href=\"#programs-behave-surprisingly-consistently\">programs behave surprisingly consistently</a></li>\n<li><a href=\"#these-are-meant-to-be-descriptive-not-prescriptive\">these are meant to be descriptive, not prescriptive</a></li>\n<li><a href=\"#it-s-not-always-obvious-which-rules-are-the-program-s-responsibility-to-implement\">it&rsquo;s not always obvious which &ldquo;rules&rdquo; are the program&rsquo;s responsibility to implement</a></li>\n<li><a href=\"#rule-1-noninteractive-programs-should-quit-when-you-press-ctrl-c\">rule 1: noninteractive programs should quit when you press <code>Ctrl-C</code></a></li>\n<li><a href=\"#rule-2-tuis-should-quit-when-you-press-q\">rule 2: TUIs should quit when you press <code>q</code></a></li>\n<li><a href=\"#rule-3-repls-should-quit-when-you-press-ctrl-d-on-an-empty-line\">rule 3: REPLs should quit when you press <code>Ctrl-D</code> on an empty line</a></li>\n<li><a href=\"#rule-4-don-t-use-more-than-16-colours\">rule 4: don&rsquo;t use more than 16 colours</a></li>\n<li><a href=\"#rule-5-vaguely-support-readline-keybindings\">rule 5: vaguely support readline keybindings</a></li>\n<li><a href=\"#rule-5-1-ctrl-w-should-delete-the-last-word\">rule 5.1: <code>Ctrl-W</code> should delete the last word</a></li>\n<li><a href=\"#rule-6-disable-colours-when-writing-to-a-pipe\">rule 6: disable colours when writing to a pipe</a></li>\n<li><a href=\"#rule-7-means-stdin-stdout\">rule 7: <code>-</code> means stdin/stdout</a></li>\n<li><a href=\"#these-rules-take-a-long-time-to-learn\">these &ldquo;rules&rdquo; take a long time to learn</a></li>\n</ul>\n<h3 id=\"programs-behave-surprisingly-consistently\">programs behave surprisingly consistently</h3>\n<p>As far as I know, there are no real standards for how programs in the terminal\nshould behave &ndash; the closest things I know of are:</p>\n<ul>\n<li>POSIX, which mostly dictates how your terminal emulator / OS / shell should\nwork together. I think it does specify a few things about how core utilities like\n<code>cp</code> should work but AFAIK it doesn&rsquo;t have anything to say about how for\nexample <code>htop</code> should behave.</li>\n<li>these <a href=\"https://clig.dev/\">command line interface guidelines</a></li>\n</ul>\n<p>But even though there are no standards, in my experience programs in the\nterminal behave in a pretty consistent way. So I wanted to write down a list of\n&ldquo;rules&rdquo; that in my experience programs mostly follow.</p>\n<h3 id=\"these-are-meant-to-be-descriptive-not-prescriptive\">these are meant to be descriptive, not prescriptive</h3>\n<p>My goal here isn&rsquo;t to convince authors of terminal programs that they <em>should</em>\nfollow any of these rules. There are lots of exceptions to these and often\nthere&rsquo;s a good reason for those exceptions.</p>\n<p>But it&rsquo;s very useful for me to know what behaviour to expect from a random new\nterminal program that I&rsquo;m using. Instead of &ldquo;uh, programs could do literally\nanything&rdquo;, it&rsquo;s &ldquo;ok, here are the basic rules I expect, and then I can keep a\nshort mental list of exceptions&rdquo;.</p>\n<p>So I&rsquo;m just writing down what I&rsquo;ve observed about how programs behave in my 20\nyears of using the terminal, why I think they behave that way, and some\nexamples of cases where that rule is &ldquo;broken&rdquo;.</p>\n<h3 id=\"it-s-not-always-obvious-which-rules-are-the-program-s-responsibility-to-implement\">it&rsquo;s not always obvious which &ldquo;rules&rdquo; are the program&rsquo;s responsibility to implement</h3>\n<p>There are a bunch of common conventions that I think are pretty clearly the\nprogram&rsquo;s responsibility to implement, like:</p>\n<ul>\n<li>config files should go in <code>~/.BLAHrc</code> or <code>~/.config/BLAH/FILE</code> or <code>/etc/BLAH/</code> or something</li>\n<li><code>--help</code> should print help text</li>\n<li>programs should print &ldquo;regular&rdquo; output to stdout and errors to stderr</li>\n</ul>\n<p>But in this post I&rsquo;m going to focus on things that it&rsquo;s not 100% obvious are\nthe program&rsquo;s responsibility. For example it feels to me like a &ldquo;law of nature&rdquo;\nthat pressing <code>Ctrl-D</code> should quit a REPL, but programs often\nneed to explicitly implement support for it &ndash; even though <code>cat</code> doesn&rsquo;t need\nto implement <code>Ctrl-D</code> support, <code>ipython</code> <a href=\"https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/shortcuts/prompt.py#L824-L837\">does</a>. (more about that in &ldquo;rule 3&rdquo; below)</p>\n<p>Understanding which things are the program&rsquo;s responsibility makes it much less\nsurprising when different programs&rsquo; implementations are slightly different.</p>\n<h3 id=\"rule-1-noninteractive-programs-should-quit-when-you-press-ctrl-c\">rule 1: noninteractive programs should quit when you press <code>Ctrl-C</code></h3>\n<p>The main reason for this rule is that noninteractive programs will quit by\ndefault on <code>Ctrl-C</code> if they don&rsquo;t set up a <code>SIGINT</code> signal handler, so this is\nkind of a &ldquo;you should act like the default&rdquo; rule.</p>\n<p>Something that trips a lot of people up is that this doesn&rsquo;t apply to\n<strong>interactive</strong> programs like <code>python3</code> or <code>bc</code> or <code>less</code>. This is because in\nan interactive program, <code>Ctrl-C</code> has a different job &ndash; if the program is\nrunning an operation (like for example a search in <code>less</code> or some Python code\nin <code>python3</code>), then <code>Ctrl-C</code> will interrupt that operation but not stop the\nprogram.</p>\n<p>As an example of how this works in an interactive program: here&rsquo;s the code <a href=\"https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/key_binding/bindings/vi.py#L2225\">in prompt-toolkit</a> (the library that iPython uses for handling input)\nthat aborts a search when you press <code>Ctrl-C</code>.</p>\n<h3 id=\"rule-2-tuis-should-quit-when-you-press-q\">rule 2: TUIs should quit when you press <code>q</code></h3>\n<p>TUI programs (like <code>less</code> or <code>htop</code>) will usually quit when you press <code>q</code>.</p>\n<p>This rule doesn&rsquo;t apply to any program where pressing <code>q</code> to quit wouldn&rsquo;t make\nsense, like <code>tmux</code> or text editors.</p>\n<h3 id=\"rule-3-repls-should-quit-when-you-press-ctrl-d-on-an-empty-line\">rule 3: REPLs should quit when you press <code>Ctrl-D</code> on an empty line</h3>\n<p>REPLs (like <code>python3</code> or <code>ed</code>) will usually quit when you press <code>Ctrl-D</code> on an\nempty line. This rule is similar to the <code>Ctrl-C</code> rule &ndash; the reason for this is\nthat by default if you&rsquo;re running a program (like <code>cat</code>) in &ldquo;cooked mode&rdquo;, then\nthe operating system will return an <code>EOF</code> when you press <code>Ctrl-D</code> on an empty\nline.</p>\n<p>Most of the REPLs I use (sqlite3, python3, fish, bash, etc) don&rsquo;t actually use\ncooked mode, but they all implement this keyboard shortcut anyway to mimic the\ndefault behaviour.</p>\n<p>For example, here&rsquo;s <a href=\"https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/shortcuts/prompt.py#L824-L837\">the code in prompt-toolkit</a>\nthat quits when you press Ctrl-D, and here&rsquo;s <a href=\"https://github.com/bminor/bash/blob/6794b5478f660256a1023712b5fc169196ed0a22/lib/readline/readline.c#L658-L672\">the same code in readline</a>.</p>\n<p>I actually thought that this one was a &ldquo;Law of Terminal Physics&rdquo; until very\nrecently because I&rsquo;ve basically never seen it broken, but you can see that it&rsquo;s\njust something that each individual input library has to implement in the links\nabove.</p>\n<p>Someone pointed out that the Erlang REPL does not quit when you press <code>Ctrl-D</code>,\nso I guess not every REPL follows this &ldquo;rule&rdquo;.</p>\n<h3 id=\"rule-4-don-t-use-more-than-16-colours\">rule 4: don&rsquo;t use more than 16 colours</h3>\n<p>Terminal programs rarely use colours other than the base 16 ANSI colours. This\nis because if you specify colours with a hex code, it&rsquo;s very likely to clash\nwith some users&rsquo; background colour. For example if I print out some text as\n<code>#EEEEEE</code>, it would be almost invisible on a white background, though it would\nlook fine on a dark background.</p>\n<p>But if you stick to the default 16 base colours, you have a much better chance\nthat the user has configured those colours in their terminal emulator so that\nthey work reasonably well with their background color. Another reason to stick\nto the default base 16 colours is that it makes less assumptions about what\ncolours the terminal emulator supports.</p>\n<p>The only programs I usually see breaking this &ldquo;rule&rdquo; are text editors, for\nexample Helix by default will use a purple background which is not a default\nANSI colour. It seems fine for Helix to break this rule since Helix isn&rsquo;t a\n&ldquo;core&rdquo; program and I assume any Helix user who doesn&rsquo;t like that colorscheme\nwill just change the theme.</p>\n<h3 id=\"rule-5-vaguely-support-readline-keybindings\">rule 5: vaguely support readline keybindings</h3>\n<p>Almost every program I use supports <code>readline</code> keybindings if it would make\nsense to do so. For example, here are a bunch of different programs and a link\nto where they define <code>Ctrl-E</code> to go to the end of the line:</p>\n<ul>\n<li>ipython (<a href=\"https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/key_binding/bindings/emacs.py#L72\">Ctrl-E defined here</a>)</li>\n<li>atuin (<a href=\"https://github.com/atuinsh/atuin/blob/a67cfc82fe0dc907a01f07a0fd625701e062a33b/crates/atuin/src/command/client/search/interactive.rs#L407\">Ctrl-E defined here</a>)</li>\n<li>fzf (<a href=\"https://github.com/junegunn/fzf/blob/bb55045596d6d08445f3c6d320c3ec2b457462d1/src/terminal.go#L611\">Ctrl-E defined here</a>)</li>\n<li>zsh (<a href=\"https://github.com/zsh-users/zsh/blob/86d5f24a3d28541f242eb3807379301ea976de87/Src/Zle/zle_bindings.c#L94\">Ctrl-E defined here</a>)</li>\n<li>fish (<a href=\"https://github.com/fish-shell/fish-shell/blob/99fa8aaaa7956178973150a03ce4954ab17a197b/share/functions/fish_default_key_bindings.fish#L43\">Ctrl-E defined here</a>)</li>\n<li>tmux&rsquo;s command prompt (<a href=\"https://github.com/tmux/tmux/blob/ae8f2208c98e3c2d6e3fe4cad2281dce8fd11f31/key-bindings.c#L490\">Ctrl-E defined here</a>)</li>\n</ul>\n<p>None of those programs actually uses <code>readline</code> directly, they just sort of\nmimic emacs/readline keybindings. They don&rsquo;t always mimic them <em>exactly</em>: for\nexample atuin seems to use <code>Ctrl-A</code> as a prefix, so <code>Ctrl-A</code> doesn&rsquo;t go to the\nbeginning of the line.</p>\n<p>Also all of these programs seem to implement their own internal cut and paste\nbuffers so you can delete a line with <code>Ctrl-U</code> and then paste it with <code>Ctrl-Y</code>.</p>\n<p>The exceptions to this are:</p>\n<ul>\n<li>some programs (like <code>git</code>, <code>cat</code>, and <code>nc</code>) don&rsquo;t have any line editing support at all (except for backspace, <code>Ctrl-W</code>, and <code>Ctrl-U</code>)</li>\n<li>as usual text editors are an exception, every text editor has its own\napproach to editing text</li>\n</ul>\n<p>I wrote more about this &ldquo;what keybindings does a program support?&rdquo; question in\n<a href=\"https://jvns.ca/blog/2024/07/08/readline/\">entering text in the terminal is complicated</a>.</p>\n<h3 id=\"rule-5-1-ctrl-w-should-delete-the-last-word\">rule 5.1: Ctrl-W should delete the last word</h3>\n<p>I&rsquo;ve never seen a program (other than a text editor) where <code>Ctrl-W</code> <em>doesn&rsquo;t</em>\ndelete the last word. This is similar to the <code>Ctrl-C</code> rule &ndash; by default if a\nprogram is in &ldquo;cooked mode&rdquo;, the OS will delete the last word if you press\n<code>Ctrl-W</code>, and delete the whole line if you press <code>Ctrl-U</code>. So usually programs\nwill imitate that behaviour.</p>\n<p>I can&rsquo;t think of any exceptions to this other than text editors but if there\nare I&rsquo;d love to hear about them!</p>\n<h3 id=\"rule-6-disable-colours-when-writing-to-a-pipe\">rule 6: disable colours when writing to a pipe</h3>\n<p>Most programs will disable colours when writing to a pipe. For example:</p>\n<ul>\n<li><code>rg blah</code> will highlight all occurrences of <code>blah</code> in the output, but if the\noutput is to a pipe or a file, it&rsquo;ll turn off the highlighting.</li>\n<li><code>ls --color=auto</code> will use colour when writing to a terminal, but not when\nwriting to a pipe</li>\n</ul>\n<p>Both of those programs will also format their output differently when writing\nto the terminal: <code>ls</code> will organize files into columns, and ripgrep will group\nmatches with headings.</p>\n<p>If you want to force the program to use colour (for example because you want to\nlook at the colour), you can use <code>unbuffer</code> to force the program&rsquo;s output to be\na tty like this:</p>\n<pre><code>unbuffer rg blah |  less -R\n</code></pre>\n<p>I&rsquo;m sure that there are some programs that &ldquo;break&rdquo; this rule but I can&rsquo;t think\nof any examples right now. Some programs have an <code>--color</code> flag that you can\nuse to force colour to be on, in the example above you could also do <code>rg --color=always | less -R</code>.</p>\n<h3 id=\"rule-7-means-stdin-stdout\">rule 7: <code>-</code> means stdin/stdout</h3>\n<p>Usually if you pass <code>-</code> to a program instead of a filename, it&rsquo;ll read from\nstdin or write to stdout (whichever is appropriate). For example, if you want\nto format the Python code that&rsquo;s on your clipboard with <code>black</code> and then copy\nit, you could run:</p>\n<pre><code>pbpaste | black - | pbcopy\n</code></pre>\n<p>(<code>pbpaste</code> is a Mac program, you can do something similar on Linux with <code>xclip</code>)</p>\n<p>My impression is that most programs implement this if it would make sense and I\ncan&rsquo;t think of any exceptions right now, but I&rsquo;m sure there are many\nexceptions.</p>\n<h3 id=\"these-rules-take-a-long-time-to-learn\">these &ldquo;rules&rdquo; take a long time to learn</h3>\n<p>These rules took me a long time for me to learn because I had to:</p>\n<ol>\n<li>learn that the rule applied anywhere at all (&quot;<code>Ctrl-C</code> will exit programs&quot;)</li>\n<li>notice some exceptions (&ldquo;okay, <code>Ctrl-C</code> will exit <code>find</code> but not <code>less</code>&rdquo;)</li>\n<li>subconsciously figure out what the pattern is (&quot;<code>Ctrl-C</code> will generally quit\nnoninteractive programs, but in interactive programs it might interrupt the\ncurrent operation instead of quitting the program&quot;)</li>\n<li>eventually maybe formulate it into an explicit rule that I know</li>\n</ol>\n<p>A lot of my understanding of the terminal is honestly still in the\n&ldquo;subconscious pattern recognition&rdquo; stage. The only reason I&rsquo;ve been taking the\ntime to make things explicit at all is because I&rsquo;ve been trying to explain how\nit works to others. Hopefully writing down these &ldquo;rules&rdquo; explicitly will make\nlearning some of this stuff a little bit faster for others.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Why pipes sometimes get \"stuck\": buffering","url":"https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/","date":1732868611,"author":"Julia Evans","unread":true,"desc":"","content":"<p>Here&rsquo;s a niche terminal problem that has bothered me for years but that I never\nreally understood until a few weeks ago. Let&rsquo;s say you&rsquo;re running this command\nto watch for some specific output in a log file:</p>\n<pre><code>tail -f /some/log/file | grep thing1 | grep thing2\n</code></pre>\n<p>If log lines are being added to the file relatively slowly, the result I&rsquo;d see\nis&hellip; nothing! It doesn&rsquo;t matter if there were matches in the log file or not,\nthere just wouldn&rsquo;t be any output.</p>\n<p>I internalized this as &ldquo;uh, I guess pipes just get stuck sometimes and don&rsquo;t\nshow me the output, that&rsquo;s weird&rdquo;, and I&rsquo;d handle it by just\nrunning <code>grep thing1 /some/log/file | grep thing2</code> instead, which would work.</p>\n<p>So as I&rsquo;ve been doing a terminal deep dive over the last few months I was\nreally excited to finally learn exactly why this happens.</p>\n<h3 id=\"why-this-happens-buffering\">why this happens: buffering</h3>\n<p>The reason why &ldquo;pipes get stuck&rdquo; sometimes is that it&rsquo;s VERY common for\nprograms to buffer their output before writing it to a pipe or file. So the\npipe is working fine, the problem is that the program never even wrote the data\nto the pipe!</p>\n<p>This is for performance reasons: writing all output immediately as soon as you\ncan uses more system calls, so it&rsquo;s more efficient to save up data until you\nhave 8KB or so of data to write (or until the program exits) and THEN write it\nto the pipe.</p>\n<p>In this example:</p>\n<pre><code>tail -f /some/log/file | grep thing1 | grep thing2\n</code></pre>\n<p>the problem is that <code>grep thing1</code> is saving up all of its matches until it has\n8KB of data to write, which might literally never happen.</p>\n<h3 id=\"programs-don-t-buffer-when-writing-to-a-terminal\">programs don&rsquo;t buffer when writing to a terminal</h3>\n<p>Part of why I found this so disorienting is that <code>tail -f file | grep thing</code>\nwill work totally fine, but then when you add the second <code>grep</code>, it stops\nworking!! The reason for this is that the way <code>grep</code> handles buffering depends\non whether it&rsquo;s writing to a terminal or not.</p>\n<p>Here&rsquo;s how <code>grep</code> (and many other programs) decides to buffer its output:</p>\n<ul>\n<li>Check if stdout is a terminal or not using the <code>isatty</code> function\n<ul>\n<li>If it&rsquo;s a terminal, use line buffering (print every line immediately as soon as you have it)</li>\n<li>Otherwise, use &ldquo;block buffering&rdquo; &ndash; only print data if you have at least 8KB or so of data to print</li>\n</ul>\n</li>\n</ul>\n<p>So if <code>grep</code> is writing directly to your terminal then you&rsquo;ll see the line as\nsoon as it&rsquo;s printed, but if it&rsquo;s writing to a pipe, you won&rsquo;t.</p>\n<p>Of course the buffer size isn&rsquo;t always 8KB for every program, it depends on the implementation. For <code>grep</code> the buffering is handled by libc, and libc&rsquo;s buffer size is\ndefined in the <code>BUFSIZ</code> variable. <a href=\"https://github.com/bminor/glibc/blob/c69e8cccaff8f2d89cee43202623b33e6ef5d24a/libio/stdio.h#L100\">Here&rsquo;s where that&rsquo;s defined in glibc</a>.</p>\n<p>(as an aside: &ldquo;programs do not use 8KB output buffers when writing to a\nterminal&rdquo; isn&rsquo;t, like, a law of terminal physics, a program COULD use an 8KB\nbuffer when writing output to a terminal if it wanted, it would just be\nextremely weird if it did that, I can&rsquo;t think of any program that behaves that\nway)</p>\n<h3 id=\"commands-that-buffer-commands-that-don-t\">commands that buffer &amp; commands that don&rsquo;t</h3>\n<p>One annoying thing about this buffering behaviour is that you kind of need to\nremember which commands buffer their output when writing to a pipe.</p>\n<p>Some commands that <strong>don&rsquo;t</strong> buffer their output:</p>\n<ul>\n<li>tail</li>\n<li>cat</li>\n<li>tee</li>\n</ul>\n<p>I think almost everything else will buffer output, especially if it&rsquo;s a command\nwhere you&rsquo;re likely to be using it for batch processing. Here&rsquo;s a list of some\ncommon commands that buffer their output when writing to a pipe, along with the\nflag that disables block buffering.</p>\n<ul>\n<li>grep (<code>--line-buffered</code>)</li>\n<li>sed (<code>-u</code>)</li>\n<li>awk (there&rsquo;s a <code>fflush()</code> function)</li>\n<li>tcpdump (<code>-l</code>)</li>\n<li>jq (<code>-u</code>)</li>\n<li>tr (<code>-u</code>)</li>\n<li>cut (can&rsquo;t disable buffering)</li>\n</ul>\n<p>Those are all the ones I can think of, lots of unix commands (like <code>sort</code>) may\nor may not buffer their output but it doesn&rsquo;t matter because <code>sort</code> can&rsquo;t do\nanything until it finishes receiving input anyway.</p>\n<p>Also I did my best to test both the Mac OS and GNU versions of these but there\nare a lot of variations and I might have made some mistakes.</p>\n<h3 id=\"programming-languages-where-the-default-print-statement-buffers\">programming languages where the default &ldquo;print&rdquo; statement buffers</h3>\n<p>Also, here are a few programming language where the default print statement\nwill buffer output when writing to a pipe, and some ways to disable buffering\nif you want:</p>\n<ul>\n<li>C (disable with <code>setvbuf</code>)</li>\n<li>Python (disable with <code>python -u</code>, or <code>PYTHONUNBUFFERED=1</code>, or <code>sys.stdout.reconfigure(line_buffering=False)</code>, or <code>print(x, flush=True)</code>)</li>\n<li>Ruby (disable with <code>STDOUT.sync = true</code>)</li>\n<li>Perl (disable with <code>$| = 1</code>)</li>\n</ul>\n<p>I assume that these languages are designed this way so that the default print\nfunction will be fast when you&rsquo;re doing batch processing.</p>\n<p>Also whether output is buffered or not might depend on how you print, for\nexample in C++ <code>cout &lt;&lt; &quot;hello\\n&quot;</code> buffers when writing to a pipe but <code>cout &lt;&lt; &quot;hello&quot; &lt;&lt; endl</code> will flush its output.</p>\n<h3 id=\"when-you-press-ctrl-c-on-a-pipe-the-contents-of-the-buffer-are-lost\">when you press <code>Ctrl-C</code> on a pipe, the contents of the buffer are lost</h3>\n<p>Let&rsquo;s say you&rsquo;re running this command as a hacky way to watch for DNS requests\nto <code>example.com</code>, and you forgot to pass <code>-l</code> to tcpdump:</p>\n<pre><code>sudo tcpdump -ni any port 53 | grep example.com\n</code></pre>\n<p>When you press <code>Ctrl-C</code>, what happens? In a magical perfect world, what I would\n<em>want</em> to happen is for <code>tcpdump</code> to flush its buffer, <code>grep</code> would search for\n<code>example.com</code>, and I would see all the output I missed.</p>\n<p>But in the real world, what happens is that all the programs get killed and the\noutput in <code>tcpdump</code>&rsquo;s buffer is lost.</p>\n<p>I think this problem is probably unavoidable &ndash; I spent a little time with\n<code>strace</code> to see how this works and <code>grep</code> receives the <code>SIGINT</code> before\n<code>tcpdump</code> anyway so even if <code>tcpdump</code> tried to flush its buffer <code>grep</code> would\nalready be dead.</p>\n<small>\n<p>After a little more investigation, there is a workaround: if you find\n<code>tcpdump</code>&rsquo;s PID and <code>kill -TERM $PID</code>, then tcpdump will flush the buffer so\nyou can see the output. That&rsquo;s kind of a pain but I tested it and it seems to\nwork.</p>\n</small>\n<h3 id=\"redirecting-to-a-file-also-buffers\">redirecting to a file also buffers</h3>\n<p>It&rsquo;s not just pipes, this will also buffer:</p>\n<pre><code>sudo tcpdump -ni any port 53 &gt; output.txt\n</code></pre>\n<p>Redirecting to a file doesn&rsquo;t have the same &ldquo;<code>Ctrl-C</code> will totally destroy the\ncontents of the buffer&rdquo; problem though &ndash; in my experience it usually behaves\nmore like you&rsquo;d want, where the contents of the buffer get written to the file\nbefore the program exits. I&rsquo;m not 100% sure whether this is something you can\nalways rely on or not.</p>\n<h3 id=\"a-bunch-of-potential-ways-to-avoid-buffering\">a bunch of potential ways to avoid buffering</h3>\n<p>Okay, let&rsquo;s talk solutions. Let&rsquo;s say you&rsquo;ve run this command or s</p>\n<pre><code>tail -f /some/log/file | grep thing1 | grep thing2\n</code></pre>\n<p>I asked people on Mastodon how they would solve this in practice and there were\n5 basic approaches. Here they are:</p>\n<h4 id=\"solution-1-run-a-program-that-finishes-quickly\">solution 1: run a program that finishes quickly</h4>\n<p>Historically my solution to this has been to just avoid the &ldquo;command writing to\npipe slowly&rdquo; situation completely and instead run a program that will finish quickly\nlike this:</p>\n<pre><code>cat /some/log/file | grep thing1 | grep thing2 | tail\n</code></pre>\n<p>This doesn&rsquo;t do the same thing as the original command but it does mean that\nyou get to avoid thinking about these weird buffering issues.</p>\n<p>(you could also do <code>grep thing1 /some/log/file</code> but I often prefer to use an\n&ldquo;unnecessary&rdquo; <code>cat</code>)</p>\n<h4 id=\"solution-2-remember-the-line-buffer-flag-to-grep\">solution 2: remember the &ldquo;line buffer&rdquo; flag to grep</h4>\n<p>You could remember that grep has a flag to avoid buffering and pass it like this:</p>\n<pre><code>tail -f /some/log/file | grep --line-buffered thing1 | grep thing2\n</code></pre>\n<h4 id=\"solution-3-use-awk\">solution 3: use awk</h4>\n<p>Some people said that if they&rsquo;re specifically dealing with a multiple greps\nsituation, they&rsquo;ll rewrite it to use a single <code>awk</code> instead, like this:</p>\n<pre><code>tail -f /some/log/file |  awk '/thing1/ &amp;&amp; /thing2/'\n</code></pre>\n<p>Or you would write a more complicated <code>grep</code>, like this:</p>\n<pre><code>tail -f /some/log/file |  grep -E 'thing1.*thing2'\n</code></pre>\n<p>(<code>awk</code> also buffers, so for this to work you&rsquo;ll want <code>awk</code> to be the last command in the pipeline)</p>\n<h4 id=\"solution-4-use-stdbuf\">solution 4: use <code>stdbuf</code></h4>\n<p><code>stdbuf</code> uses LD_PRELOAD to turn off libc&rsquo;s buffering, and you can use it to turn off output buffering like this:</p>\n<pre><code>tail -f /some/log/file | stdbuf -o0 grep thing1 | grep thing2\n</code></pre>\n<p>Like any <code>LD_PRELOAD</code> solution it&rsquo;s a bit unreliable &ndash; it doesn&rsquo;t work on\nstatic binaries, I think won&rsquo;t work if the program isn&rsquo;t using libc&rsquo;s\nbuffering, and doesn&rsquo;t always work on Mac OS. Harry Marr has a really nice <a href=\"https://hmarr.com/blog/how-stdbuf-works/\">How stdbuf works</a> post.</p>\n<h4 id=\"solution-5-use-unbuffer\">solution 5: use <code>unbuffer</code></h4>\n<p><code>unbuffer program</code> will force the program&rsquo;s output to be a TTY, which means\nthat it&rsquo;ll behave the way it normally would on a TTY (less buffering, colour\noutput, etc). You could use it in this example like this:</p>\n<pre><code>tail -f /some/log/file | unbuffer grep thing1 | grep thing2\n</code></pre>\n<p>Unlike <code>stdbuf</code> it will always work, though it might have unwanted side\neffects, for example <code>grep thing1</code>&rsquo;s will also colour matches.</p>\n<p>If you want to install unbuffer, it&rsquo;s in the <code>expect</code> package.</p>\n<h3 id=\"that-s-all-the-solutions-i-know-about\">that&rsquo;s all the solutions I know about!</h3>\n<p>It&rsquo;s a bit hard for me to say which one is &ldquo;best&rdquo;, I think personally I&rsquo;m\nmostly likely to use <code>unbuffer</code> because I know it&rsquo;s always going to work.</p>\n<p>If I learn about more solutions I&rsquo;ll try to add them to this post.</p>\n<h3 id=\"i-m-not-really-sure-how-often-this-comes-up\">I&rsquo;m not really sure how often this comes up</h3>\n<p>I think it&rsquo;s not very common for me to have a program that slowly trickles data\ninto a pipe like this, normally if I&rsquo;m using a pipe a bunch of data gets\nwritten very quickly, processed by everything in the pipeline, and then\neverything exits. The only examples I can come up with right now are:</p>\n<ul>\n<li>tcpdump</li>\n<li><code>tail -f</code></li>\n<li>watching log files in a different way like with <code>kubectl logs</code></li>\n<li>the output of a slow computation</li>\n</ul>\n<h3 id=\"what-if-there-were-an-environment-variable-to-disable-buffering\">what if there were an environment variable to disable buffering?</h3>\n<p>I think it would be cool if there were a standard environment variable to turn\noff buffering, like <code>PYTHONUNBUFFERED</code> in Python. I got this idea from a\n<a href=\"https://blog.plover.com/Unix/stdio-buffering.html\">couple</a> of <a href=\"https://blog.plover.com/Unix/stdio-buffering-2.html\">blog posts</a> by Mark Dominus\nin 2018. Maybe <code>NO_BUFFER</code> like <a href=\"https://no-color.org/\">NO_COLOR</a>?</p>\n<p>The design seems tricky to get right; Mark points out that NETBSD has <a href=\"https://man.netbsd.org/setbuf.3\">environment variables called <code>STDBUF</code>, <code>STDBUF1</code>, etc</a> which gives you a\nton of control over buffering but I imagine most developers don&rsquo;t want to\nimplement many different environment variables to handle a relatively minor\nedge case.</p>\n<p>I&rsquo;m also curious about whether there are any programs that just automatically\nflush their output buffers after some period of time (like 1 second). It feels\nlike it would be nice in theory but I can&rsquo;t think of any program that does that\nso I imagine there are some downsides.</p>\n<h3 id=\"stuff-i-left-out\">stuff I left out</h3>\n<p>Some things I didn&rsquo;t talk about in this post since these posts have been\ngetting pretty long recently and seriously does anyone REALLY want to read 3000\nwords about buffering?</p>\n<ul>\n<li>the difference between line buffering and having totally unbuffered output</li>\n<li>how buffering to stderr is different from buffering to stdout</li>\n<li>this post is only about buffering that happens <strong>inside the program</strong>, your\noperating system&rsquo;s TTY driver also does a little bit of buffering sometimes</li>\n<li>other reasons you might need to flush your output other than &ldquo;you&rsquo;re writing\nto a pipe&rdquo;</li>\n</ul>\n","flags":null,"enclosureUrl":"","enclosureMime":""}]}
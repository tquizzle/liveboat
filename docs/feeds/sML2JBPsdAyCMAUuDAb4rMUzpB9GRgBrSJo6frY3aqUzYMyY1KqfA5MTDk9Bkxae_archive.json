{"id":"sML2JBPsdAyCMAUuDAb4rMUzpB9GRgBrSJo6frY3aqUzYMyY1KqfA5MTDk9Bkxae","title":"Blog - Bitfield Consulting","displayTitle":"Dev - Bitfield","url":"https://bitfieldconsulting.com/posts?format=rss","feedLink":"https://bitfieldconsulting.com/posts/","items":[{"title":"Why you can't meditate","url":"https://bitfieldconsulting.com/posts/why-you-cant-meditate","date":1734506700,"author":"John Arundel","unread":true,"desc":"","content":"<figure class=\"\n              sqs-block-image-figure\n              intrinsic\n            \"\n        >\n          \n        \n        \n\n        \n          \n            \n          \n            \n                \n                \n                \n                \n                \n                \n                \n                <img data-stretch=\"false\" data-image=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png\" data-image-dimensions=\"400x400\" data-image-focal-point=\"0.5,0.5\" alt=\"\" data-load=\"false\" elementtiming=\"system-image-block\" src=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png?format=1000w\" width=\"400\" height=\"400\" sizes=\"(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw\" onload=\"this.classList.add(&quot;loaded&quot;)\" srcset=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/1728825928097-KHDORVDXRDK9OYQCIBGX/monk.png?format=2500w 2500w\" loading=\"lazy\" decoding=\"async\" data-loader=\"sqs\">\n\n            \n          \n        \n          \n        \n\n        \n      \n        </figure>\n      \n\n    \n  \n\n\n  \n\n\n\n\n\n  <p class=\"\"><em>From </em><a href=\"https://bitfieldconsulting.com/books/monk-mode\"><em>Monk Mode</em></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n<blockquote>\n<p><em>The mind is only a vehicle. When we don’t need our legs we don’t\nuse them. Likewise, let the mind rest when not needed.</em><br />\n—Jean Klein, <a href=\"https://amzn.to/49LFdbb\">“Who Am I? The Sacred\nQuest”</a></p>\n</blockquote>\n<p>This is the first in a three-part series about meditation and working\nwith the mind, excerpted from my book <a href=\"https://bitfieldconsulting.com/books/monk-mode\"><em>Monk Mode</em></a>.</p>\n<ol type=\"1\">\n<li><strong>Why you can’t meditate</strong></li>\n<li>Catching grace (<em>coming soon</em>)</li>\n<li>Getting nothing done (<em>coming soon</em>)</li>\n</ol>\n<hr />\n<p>The mind is a <em>lot</em>, as perhaps you’ve noticed while owning\none. It can be a rather exhausting place to live sometimes. No wonder,\nwhen there’s so much going on.</p>\n<p>Is it possible to get a break from the mind and its endless, restless\ndistractions? Could we dial it all back a little bit, and make some\nheadspace for <em>productive</em> thinking? Or even give the mind a rest\naltogether while the body gets on with just <em>being</em>, for a\nchange?</p>\n<p>Maybe we could. It’s a struggle, though, especially at first, just\nbecause we’re so used to the mind rattling on at a million thoughts per\nsecond, every hour of the day and night. If you’ve ever had trouble\ngetting to sleep because your mind won’t shut up, for example, you’ll\nknow just what I’m talking about.</p>\n<h2 id=\"quieting-the-mind-is-impossible\">Quieting the mind is\nimpossible</h2>\n<p>Many people, to help relieve this cranial indigestion, are drawn to\npractices such as meditation (enthusiastically promoted wherever\nself-help books and apps are sold). But meditation never quite seems to\nlive up to the sales pitch, and most people try it once or twice and\nthen move on, disappointed.</p>\n<p>Let’s try to dig in to why that might be, and see if there’s\nsomething we can do about it.</p>\n<p>I think if you asked most people what meditation is, they’d probably\nsay something like “Quieting your mind”. Fine. Let’s try that, then.\nExperiment one. Sit down somewhere comfortable, put this book down, and\njust spend a minute or two attempting to quiet your mind. Then come back\nhere (we’ll wait).</p>\n<hr />\n<p>Did it work? <em>Not at all</em>, I suspect. In fact, the more you\nfrantically concentrated and tried to force your mind to stop working,\nthe less calm and centred you probably became. Irritating, isn’t it?</p>\n<p>You tried meditation and failed, so you’re just one of those people\nwho’s not good at meditation. It’s not for you. Oh well, there’s always\ncrystal healing, or Zumba, or binaural beats. Right?</p>\n<p>Well, yes. It’s true, you can’t meditate, but don’t feel too bad,\nbecause there’s a reason for that: <em>no one</em> can meditate.</p>\n<h2 id=\"magical-expectations\">Magical expectations</h2>\n<p>At least, no one can meditate in the way it’s typically sold to us:\nyou assume the lotus position, close your eyes, and instantly become\ncalm, happy, and relaxed. That’s just not a thing that happens.</p>\n<blockquote>\n<p><em>Many people come to meditation with a kind of mystical, magical\nview. “If I sit down in the right posture, wearing the right clothes,\nwith the right expression on my face, and in the right environment,\nsomething magical should happen in my mind.”</em><br />\n—Rob Nairn, <a href=\"https://www.shambhala.com/diamond-mind-494.html\">“Diamond Mind: A\nPsychology of Meditation”</a></p>\n</blockquote>\n<p>You can’t switch off your brain, and that’s probably just as well,\nsince you’d die more or less instantly. But it <em>feels</em> like\nsomething we’d love to do, at least for a little while every day, and we\nall get quite frustrated at our apparent inability to do it.</p>\n<h2 id=\"an-experiment\">An experiment</h2>\n<p>It’s actually quite interesting to observe what the mind does when\nwe’re suddenly looking at it. Let’s try a slightly different experiment,\nthen. Again, sit comfortably—so probably not in the lotus position,\nunless you’re unusually flexible. In a chair is fine.</p>\n<p>Now, don’t try to be calm, to quiet your mind, or to think of\nnothing; we’ve established that’s physically impossible. Instead, just\nsit there and pay attention to whatever happens inside your head. If a\nthought pops up, what is it about? If you find yourself boarding a\n<em>train</em> of thought, where does it go?</p>\n<p>You’re not trying to <em>do</em> anything, remember, just to notice\nwhat goes on. Whatever happens is okay, in this experiment: you can’t\nget this wrong. When you think it’s been one or two minutes, stop.</p>\n<hr />\n<p>What was your interior monologue like? Mine usually goes something\nlike this:</p>\n<blockquote>\n<p><em>Hmm. This is boring. I’m hungry. Also, I should probably visit\nthe bathroom soon. But not quite yet. I need to finish this meditation\nfirst. It doesn’t seem to be going very well. I must have been here ten\nminutes already and I’m not feeling remotely calm. Man, I suck at this.\nConcentrate! What is that buzzing noise? Is that a fly? Or is it just\nthe fridge motor?</em><br />\n<em>I wonder if the fridge is breaking down. How old even is that\nfridge, anyway? Maybe three, four years? It should last longer than\nthat, shouldn’t it? What part of a fridge could even wear out, anyway? I\nguess… the compressor? Do fridges still have those? Some kind of motor,\nanyway. If it does go wrong, I hope it’s not when I’m on\nvacation.</em><br />\n<em>Like that old bit of Michael McIntyre’s: “You go away for two weeks\nand you think your appliances will start to combust! So you unplug every\nsingle thing in your home. Everything except the fridge. We trust the\nfridge!”</em></p>\n</blockquote>\n<p>Not always exactly like that, of course, but something along those\nlines. First, the mind rebels at the momentary lack of outside\nstimulation. Then, it starts to generate its own entertainment. Sounds,\nfeelings, memories, physical sensations like itching or discomfort, act\nas the seeds around which the crystal grows. One thought triggers\nanother, and very quickly I’m on a wild ride of free-association.</p>\n<h2 id=\"the-mind-adores-its-own-fabrications\">The mind adores its own\nfabrications</h2>\n<p>When it’s not dredging up old comedy bits, my mind likes to gnaw away\nat things that are worrying me about the future, or berating me about\nthe past:</p>\n<blockquote>\n<p><em>What’s going to happen about that email? I think I came across\nkind of rude. I hope that person doesn’t think I’m rude and angry. What\nif they send an angry reply? Maybe they’ve already replied. I should\ncheck my inbox. But then I’d get stressed. Or is it more stressful\nsitting here wondering whether that email is there or not, and not\nknowing?</em></p>\n</blockquote>\n<p>Is it any wonder that we sometimes feel more agitated after a session\nof “meditation” than before it? Here’s part of what I think is going on.\nThe million and one thoughts bouncing around inside the careenium are\nmaking a lot of noise, but most of the time we ruthlessly suppress it by\nbeing busy. “La la la! I can’t hear you!”</p>\n<p>Talking, working, watching TV, listening to podcasts, driving,\nplaying games, or just scrolling on our phones: more or less anything\nthat engages the brain circuits seems good enough to keep the intrusive\nthoughts, worries, and random nonsense at bay—at least for a while.</p>\n<blockquote>\n<p><em>In the end the mind adores its own fabrications.</em><br />\n—Jean Klein, <a href=\"https://amzn.to/49LFdbb\">“Who Am I? The Sacred\nQuest”</a></p>\n</blockquote>\n<h2 id=\"you-cannot-stop-thoughts\">You cannot stop thoughts</h2>\n<p>If we turn off all that incoming information for a minute, though,\nwe’re abruptly exposed to the din that’s going on inside our heads. It\nwas always there, but we were just studiously avoiding paying attention\nto it.</p>\n<p>For a random thought in the careenium, though, used to feeling\nneglected and ignored among the chaos, this is a rare and precious\nopportunity. All of a sudden, it has our attention! Time to shout even\nlouder. Maybe this time it’ll cut through.</p>\n<p>As a careenium owner, this is highly disconcerting. It’s like trying\nto have a dozen conversations all at once, each with someone suffering\nbadly from attention deficit disorder. Not a pleasant experience, and of\ncourse it’s most people’s <em>first</em> experience of anything like\nmeditation.</p>\n<blockquote>\n<p><em>When we meditate we inevitably make assumptions about what we\nshould be able to do. One assumption we may make is that we should be\nable to “clear the mind,” because we have read this dreadful phrase in\nbooks.</em><br />\n<em>You won’t believe the number of times I’ve said to groups of people,\n“When you meditate you can’t clear your mind, you cannot stop thoughts,\nyou cannot get rid of emotions,” and within ten minutes somebody will\nsay “When I started meditating, I couldn’t get rid of these thoughts\nthat kept coming back to me.”</em><br />\n—Rob Nairn, <a href=\"https://www.shambhala.com/diamond-mind-494.html\">“Diamond Mind: A\nPsychology of Meditation”</a></p>\n</blockquote>\n<p>Calming? Far from it. Better reach for your phone and load up some\nmore distractions. As long as we keep gently tickling the surface of the\nmind, giving it enough input to maintain a constant level of mild\nstimulation, it won’t turn round and bite us. We hope.</p>\n<p>In the next post, we’ll talk about how to abandon the unhelpful\n“end-gaining” mindset that’s often associated with meditation, and\ninstead relax, stop struggling, and let the grass grow by itself. If you\ncan’t wait, <a href=\"https://bitfieldconsulting.com/books/monk-mode\">check out the book</a>.</p>\n&nbsp;\n\n\n\n\n  \n\n  \n\n    \n        \n        \n          <a href=\"https://bitfieldconsulting.com/courses/focus\">\n            \n              \n            \n              \n            \n\n            <img class=\"sqs-product-block-main-image\" data-image=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/be9e2d17-7096-4a3e-8577-ce7ca54a89f8/Focus+and+growth.png\" data-image-dimensions=\"1000x1500\" data-image-focal-point=\"0.5,0.5\" alt=\"Focus &amp; growth mentoring\" data-load=\"false\" elementtiming=\"system-product\" src=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/be9e2d17-7096-4a3e-8577-ce7ca54a89f8/Focus+and+growth.png?format=1000w\" />\n\n            \n              \n            \n          </a>\n\n          \n        \n        \n    \n\n    \n\n      \n\n      \n        \n\n\n\nfrom $149.95\n\n\n      \n\n      \n\n      \n        \n  \n  \n  \n  \n\n  \n    \n    Duration: \n    \n      <select aria-label=\"Select Duration\" data-variant-option-name=\"Duration\">\n        <option value=\"\">Select Duration</option>\n        <option value=\"45m\">45m</option><option value=\"90m\">90m</option>\n      </select>\n    \n    \n      <input name=\"variant-option-Duration\" id=\"variant-option-Duration-45m\" type=\"radio\" class=\"variant-radiobtn\" value=\"45m\"/>\n      <label role=\"button\" tabindex=\"0\" for=\"variant-option-Duration-45m\" class=\"sqs-button-element--secondary\">45m</label>\n      <input name=\"variant-option-Duration\" id=\"variant-option-Duration-90m\" type=\"radio\" class=\"variant-radiobtn\" value=\"90m\"/>\n      <label role=\"button\" tabindex=\"0\" for=\"variant-option-Duration-90m\" class=\"sqs-button-element--secondary\">90m</label>\n    \n    \n  \n\n\n        \n\n\n\n  Quantity:\n  <input min=\"1\" size=\"4\" max=\"9999\" step=\"1\" type=\"number\" value=\"1\" aria-label=\"Quantity\"></input>\n\n\n        \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    Add To Cart\n  \n\n      \n\n    \n\n  \n\n\n\n\n&nbsp;","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Suite smells: undertesting and overtesting","url":"https://bitfieldconsulting.com/posts/undertesting-overtesting","date":1733653380,"author":"John Arundel","unread":true,"desc":"","content":"<figure class=\"\n              sqs-block-image-figure\n              intrinsic\n            \"\n        >\n          \n        \n        \n\n        \n          \n            \n          \n            \n                \n                \n                \n                \n                \n                \n                \n                <img data-stretch=\"false\" data-image=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png\" data-image-dimensions=\"350x350\" data-image-focal-point=\"0.5,0.5\" alt=\"\" data-load=\"false\" elementtiming=\"system-image-block\" src=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=1000w\" width=\"350\" height=\"350\" sizes=\"(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw\" onload=\"this.classList.add(&quot;loaded&quot;)\" srcset=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=2500w 2500w\" loading=\"lazy\" decoding=\"async\" data-loader=\"sqs\">\n\n            \n          \n        \n          \n        \n\n        \n      \n        </figure>\n      \n\n    \n  \n\n\n  \n\n\n\n\n\n  <p class=\"\"><em>From </em><a href=\"https://bitfieldconsulting.com/books/tests\"><em>The Power of Go: Tests</em></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n<blockquote>\n<p><em>It is tempting to test that the code does what it should do and\nleave it at that, but it’s arguably even more important to test that it\ndoesn’t do what it shouldn’t do.</em><br />\n—Mike Bland, <a href=\"https://martinfowler.com/articles/testing-culture.html\">“Goto\nFail, Heartbleed, and Unit Testing Culture”</a></p>\n</blockquote>\n<p><a href=\"https://bitfieldconsulting.com/books/tests\">The Power of Go: Tests</a> is a compilation of\nall the lessons I’ve learned over a lifetime of software engineering:\nit’s about how to write robust, reliable, and above all <em>correct</em>\nprograms.</p>\n<p>This is the second in a three-part series of excerpts from the book,\nfocusing on test suites in Go, what kind of problems you might find with\nthem, and some tips on how to fix them.</p>\n<ol type=\"1\">\n<li><a href=\"https://bitfieldconsulting.com/posts/testing-legacy-code\">Testing legacy code</a></li>\n<li><strong>Undertesting and overtesting</strong></li>\n<li>Slow, flaky, and failing (<em>coming soon</em>)</li>\n</ol>\n<hr />\n<p>In the <a href=\"https://bitfieldconsulting.com/posts/testing-legacy-code\">first post</a>, we talked\nabout what to do if your codebase has no tests at all, or not enough\ntests. Today, let’s look at the tests you have, and what might be wrong\nwith them.</p>\n<p>Even when a certain piece of code is nominally <em>covered</em> by\nsome test, is it really tested? That’s not always a given. In other\nwords, just because a test causes some function to be executed, that\ndoesn’t mean it shows that the function <em>does</em> the right thing.\nFor that we need to look more closely at the test. Is it too\noptimistic?</p>\n<h2 id=\"optimistic-tests\">Optimistic tests</h2>\n<p>An optimistic test is designed only to confirm that the system works,\nnot to prove that it doesn’t.</p>\n<p>Surprisingly, one problem that optimistic tests can miss is when the\nsystem does <em>nothing at all</em>.</p>\n<p>For example, consider a test for some function\n<code>user.Create</code>, like this:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestCreateCreatesGivenUser<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/5/user_test.go\">Listing\n<code>user/5</code></a>)</p>\n<p>At first glance, this is plausible. We create a test user, Alice, and\ncheck if she subsequently exists. If not, the test fails. That part is\nfine. So, can you see what’s missing? If not, you might like to take a\nminute to think about it before reading on.</p>\n<p>It’s always worth asking of any test whether it rigorously checks its\n<em>preconditions</em> as well as its postconditions. The developer’s\nfocus, naturally enough, tends to be on the state of the world\n<em>after</em> the operation under test, but that can result in some\nrisky assumptions about its <em>prior</em> state.</p>\n<p>Suppose <code>Create</code> actually does nothing. How could this\ntest pass? Only when Alice already exists. And would we know if that was\nthe case?</p>\n<p>Our test checks that Alice exists <em>after</em> calling\n<code>Create</code>, but what’s missing is a check that she doesn’t\nexist <em>beforehand</em>.</p>\n<p>In other words, suppose we don’t clean up the database after each\ntest run, so if Alice was <em>ever</em> created, she’ll still be there.\nAnd suppose someone later introduces a bug into <code>Create</code> that\nprevents it from actually creating users.</p>\n<p>To put it another way, here’s an obviously incorrect implementation\nthat nevertheless passes this test:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">type</span> User <span class=\"kw\">struct</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Name <span class=\"dt\">string</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">var</span> <span class=\"op\">(</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    m     <span class=\"op\">=</span> <span class=\"bu\">new</span><span class=\"op\">(</span>sync<span class=\"op\">.</span>Mutex<span class=\"op\">)</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    users <span class=\"op\">=</span> <span class=\"kw\">map</span><span class=\"op\">[</span><span class=\"dt\">string</span><span class=\"op\">]*</span>User<span class=\"op\">{</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">:</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>            Name<span class=\"op\">:</span> <span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">,</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">},</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">)</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> Create<span class=\"op\">(</span>name <span class=\"dt\">string</span><span class=\"op\">)</span> <span class=\"op\">{}</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> Exists<span class=\"op\">(</span>name <span class=\"dt\">string</span><span class=\"op\">)</span> <span class=\"dt\">bool</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    m<span class=\"op\">.</span>Lock<span class=\"op\">()</span></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">defer</span> m<span class=\"op\">.</span>Unlock<span class=\"op\">()</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    _<span class=\"op\">,</span> ok <span class=\"op\">:=</span> users<span class=\"op\">[</span>name<span class=\"op\">]</span></span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> ok</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/5/user.go\">Listing\n<code>user/5</code></a>)</p>\n<p>We thought we were testing <code>Create</code>, but we really aren’t,\nbecause <code>Create</code> does nothing at all, yet the test doesn’t\ndetect that. Alice <em>always</em> exists, so the test always passes.\nThis kind of <em>mirage test</em> is especially dangerous, because it\nlooks like you have a test, but you don’t.</p>\n<p>It turns out that <code>Create</code> needs not just to leave the\nworld in a state where Alice exists. What’s important about\n<code>Create</code> is that it <em>changes</em> the world from a state\nwhere Alice doesn’t exist to one where she does.</p>\n<p>You might think that goes without saying, but we’ve just proved that\nit doesn’t. We need to pay attention to preconditions as well as\npostconditions, according to the contract that the system under test is\nsupposed to fulfil.</p>\n<p>Let’s write a test that <em>would</em> catch this bug, then:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestCreateCreatesGivenUser<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Fatal<span class=\"op\">(</span><span class=\"st\">&quot;Alice unexpectedly exists&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/6/user_test.go\">Listing\n<code>user/6</code></a>)</p>\n<p>The difference is very simple, but important: we check our\npreconditions.</p>\n<p>What about <em>this</em> test, then?</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestDeleteDeletesGivenUser<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Delete<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice still exists after delete&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>Again, this looks reasonable on a cursory inspection. It creates\nAlice, deletes her (sorry, Alice), and then ensures that she no longer\nexists. What could be wrong with <code>Delete</code> that this test\nwouldn’t catch?</p>\n<p>Well, what if <em>both</em> <code>Create</code> and\n<code>Delete</code> do nothing at all? That seems like a pretty major\nbug, yet this test doesn’t detect it. There are no preconditions, so the\noutcome of the test is the same whether <code>Create</code> and\n<code>Delete</code> actually have any effect or not. The test isn’t\nwrong, as far as it goes: it just doesn’t <em>go</em> far enough.\nThere’s a pretty big loophole in it.</p>\n<p>This kind of bug isn’t as unlikely as you might think, either. I’ve\nmade this exact mistake in the past: I stubbed out <code>Create</code>\nand <code>Delete</code> methods with placeholders, then forgot that I\nhadn’t finished them, because the test was passing. It’s easy to do.</p>\n<p>What we’re missing here, in fact, is another precondition: that the\nuser <em>does</em> exist before we try to delete them.</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestDeleteDeletesGivenUser<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Delete<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice still exists after delete&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/6/user_test.go\">Listing\n<code>user/6</code></a>)</p>\n<p>If <code>Create</code> doesn’t do anything, this test will fail at\nthe first check. If <code>Delete</code> doesn’t do anything, it’ll fail\nat the second.</p>\n<p>In any non-trivial codebase, you’re pretty much guaranteed to find at\nleast a few tests that are optimistically feeble in this way. Look for\nany test that doesn’t properly establish its preconditions, and fix it.\nThis will add a lot of value to the test suite overall.</p>\n<p>Another example of this kind of problem is when the test fails to\ncheck some important but implicit <em>postconditions</em>. For example,\nin <code>TestDelete</code>, the explicit postcondition here is that\nAlice shouldn’t exist after deletion, so what are we implicitly missing?\nWhat else could a reasonable person ask for from a <code>Delete</code>\nfunction?</p>\n<p>As usual, a productive way to answer that is to think about possible\nbugs in <code>Delete</code>. Suppose, for example, that\n<code>Delete</code> mistakenly deletes not only Alice, but <em>all</em>\nusers in the database. That kind of thing is surprisingly easy to do,\nespecially with SQL queries (omitting a <code>WHERE</code> clause, for\nexample).</p>\n<p>If calling <code>Delete</code> on a single user instead nukes the\nwhole database, that’s a pretty major bug, wouldn’t you say? This test\ndoesn’t detect it, because it focuses only on what <em>should</em>\nhappen, and ignores what shouldn’t.</p>\n<p>How <em>could</em> we detect such a bug, then? Quite easily, it turns\nout.</p>\n<p>Here’s what we do. We create <em>two</em> users in the test, but\ndelete only one of them. Then we check that the one we deleted doesn’t\nexist, and the one we didn’t delete still exists:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestDeleteDeletesGivenUserOnly<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Bob not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Delete<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice still exists after delete&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Bob was unexpectedly deleted&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-17\"><a href=\"#cb6-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-18\"><a href=\"#cb6-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>This test has accumulated a bit of paperwork, so let’s refactor that\nout into a helper function:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestDeleteDeletesGivenUserOnly<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createUserOrFail<span class=\"op\">(</span>t<span class=\"op\">,</span> <span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createUserOrFail<span class=\"op\">(</span>t<span class=\"op\">,</span> <span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Delete<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice still exists after delete&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Bob was unexpectedly deleted&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-14\"><a href=\"#cb7-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> createUserOrFail<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">,</span> name <span class=\"dt\">string</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-15\"><a href=\"#cb7-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Helper<span class=\"op\">()</span></span>\n<span id=\"cb7-16\"><a href=\"#cb7-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span>name<span class=\"op\">)</span></span>\n<span id=\"cb7-17\"><a href=\"#cb7-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span>name<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-18\"><a href=\"#cb7-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Errorf<span class=\"op\">(</span><span class=\"st\">&quot;%s not created&quot;</span><span class=\"op\">,</span> name<span class=\"op\">)</span></span>\n<span id=\"cb7-19\"><a href=\"#cb7-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb7-20\"><a href=\"#cb7-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/7/user_test.go\">Listing\n<code>user/7</code></a>)</p>\n<p>Who would have thought that there were so much scope for things to go\nwrong with a seemingly simple <code>Delete</code> function? Well,\n<em>you</em> would, or at least you will now.</p>\n<p>If you find yourself, as a result, becoming thoroughly sceptical\nabout the idea that <em>anything</em> works the way it’s supposed to,\ncongratulations: you’re thinking like a tester.</p>\n<h2 id=\"persnickety-tests\">Persnickety tests</h2>\n<p>Sometimes, though not often, people can take testing a bit\n<em>too</em> much to heart, and test more than strictly necessary. As\nwe’ve seen, it’s much easier to err the other way, and leave out\nimportant things such as preconditions and implicit postconditions, like\nnot deleting all the users in the database. But overtesting does afflict\nsome test suites.</p>\n<p>It’s important to keep tests focused on only the part of the system\nthey’re supposed to care about, and on only the <em>behaviour</em> that\nmatters. They should avoid checking for irrelevant things.</p>\n<p>Beware also of simply comparing too much. Sometimes it can be\nconvenient to compare a function’s <em>entire</em> result against an\nexpected value, rather than individually checking each of its fields,\nbut it’s not always a good idea.</p>\n<p>Comparing the whole struct makes sense when all the fields are\naffected by the behaviour under test. But when only some fields are\nimportant to <em>this</em> test, checking irrelevant fields makes the\ntest brittle, and obscures its real purpose. The same applies to\nchecking entire strings or output files, when only certain parts of the\ndata are actually important.</p>\n<blockquote>\n<p><em>The easiest way to avoid brittle tests is to check only the\nproperties you care about. Be selective in your assertions. Don’t check\nfor exact string matches, for example, but look for relevant substrings\nthat will remain unchanged as the program evolves.</em><br />\n—Alan Donovan &amp; Brian Kernighan, <a href=\"https://amzn.to/3ObBI2O\">“The Go Programming Language”</a></p>\n</blockquote>\n<p>Watch out for tests that lazily compare output against a golden file,\nfor example, when the behaviour they’re testing is only about a small\nsubset of that file. Similarly, <a href=\"https://bitfieldconsulting.com/posts/comparing-errors\">a test\nshould not assert the exact value of an error</a>, but only that there\n<em>is</em> some error, when there’s supposed to be.</p>\n<p>Some exposure to the idea of <em>property-based</em> testing, as\ncommonly used in <a href=\"https://bitfieldconsulting.com/posts/fuzz-tests\">fuzz testing</a>, can also\nbe helpful for constructing robust tests. For example, what’s important\nabout a result is often not its <em>exact</em> value, but some\n<em>property</em> of the value, especially an invariant property.</p>\n<p>I recently reviewed a program that needed to create a “fingerprint”\nof a piece of data, for deduplication purposes. In case the same data\nwas submitted to the system later, the fingerprint would enable the\nsystem to recognise it without actually having to store all the data,\nwhich could be very large.</p>\n<p>A cryptographic digest, or hash value, is an obvious way to do this,\nso the program had a test something like this:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestHashReturnsMD5HashOfGivenData<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    data <span class=\"op\">:=</span> <span class=\"op\">[]</span><span class=\"dt\">byte</span><span class=\"op\">(</span><span class=\"st\">&quot;These pretzels are making me thirsty.&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    want <span class=\"op\">:=</span> md5<span class=\"op\">.</span>Sum<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    got <span class=\"op\">:=</span> fingerprint<span class=\"op\">.</span>Hash<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> want <span class=\"op\">!=</span> got <span class=\"op\">{</span></span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Errorf<span class=\"op\">(</span><span class=\"st\">&quot;want %v, got %v&quot;</span><span class=\"op\">,</span> want<span class=\"op\">,</span> got<span class=\"op\">)</span></span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/fingerprint/1/fingerprint_test.go\">Listing\n<code>fingerprint/1</code></a>)</p>\n<p>The implementation of <code>Hash</code> doesn’t matter, but let’s\nassume it’s something like this:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> Hash<span class=\"op\">(</span>data <span class=\"op\">[]</span><span class=\"dt\">byte</span><span class=\"op\">)</span> <span class=\"op\">[</span>md5<span class=\"op\">.</span>Size<span class=\"op\">]</span><span class=\"dt\">byte</span> <span class=\"op\">{</span></span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> md5<span class=\"op\">.</span>Sum<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/fingerprint/1/fingerprint.go\">Listing\n<code>fingerprint/1</code></a>)</p>\n<p>Fine. But <a href=\"https://en.wikipedia.org/wiki/MD5#Security\">MD5 is\ninsecure</a>, so I suggested using a SHA-256 hash instead:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> Hash<span class=\"op\">(</span>data <span class=\"op\">[]</span><span class=\"dt\">byte</span><span class=\"op\">)</span> <span class=\"op\">[</span>sha256<span class=\"op\">.</span>Size<span class=\"op\">]</span><span class=\"dt\">byte</span> <span class=\"op\">{</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> sha256<span class=\"op\">.</span>Sum256<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/fingerprint/2/fingerprint.go\">Listing\n<code>fingerprint/2</code></a>)</p>\n<p>This broke the test, which makes no sense, because <code>Hash</code>\n<em>works</em>. So what’s the problem?</p>\n<p>Well, what are we really testing here? Not that <code>Hash</code>\nproduces an <em>MD5</em> hash, specifically; that’s incidental. What\nmatters is that the same data should always hash to the same value,\nwhatever that value actually is. And, no less importantly, that\n<em>different</em> data should hash to different values.</p>\n<p>So we ended up with a test something like this instead:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestHashGivesSameUniqueHashForSameData<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    data <span class=\"op\">:=</span> <span class=\"op\">[]</span><span class=\"dt\">byte</span><span class=\"op\">(</span><span class=\"st\">&quot;These pretzels are making me thirsty.&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    orig <span class=\"op\">:=</span> fingerprint<span class=\"op\">.</span>Hash<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb11-5\"><a href=\"#cb11-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    same <span class=\"op\">:=</span> fingerprint<span class=\"op\">.</span>Hash<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb11-6\"><a href=\"#cb11-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    different <span class=\"op\">:=</span> fingerprint<span class=\"op\">.</span>Hash<span class=\"op\">([]</span><span class=\"dt\">byte</span><span class=\"op\">(</span><span class=\"st\">&quot;Hello, Newman&quot;</span><span class=\"op\">))</span></span>\n<span id=\"cb11-7\"><a href=\"#cb11-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> orig <span class=\"op\">!=</span> same <span class=\"op\">{</span></span>\n<span id=\"cb11-8\"><a href=\"#cb11-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;same data produced different hash&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb11-9\"><a href=\"#cb11-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb11-10\"><a href=\"#cb11-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> orig <span class=\"op\">==</span> different <span class=\"op\">{</span></span>\n<span id=\"cb11-11\"><a href=\"#cb11-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;different data produced same hash&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb11-12\"><a href=\"#cb11-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb11-13\"><a href=\"#cb11-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/fingerprint/2/fingerprint_test.go\">Listing\n<code>fingerprint/2</code></a>)</p>\n<p>This test is better, because it doesn’t care about the implementation\ndetails of <code>Hash</code>, such as which algorithm is used. What it\ncares about is that the same input to <code>Hash</code> always gives the\nsame result, so it catches bugs like an unstable hash algorithm or even\na random result.</p>\n<p>And, because a maliciously lazy implementation of <code>Hash</code>\nmight simply <em>always</em> return the same fixed value, the test also\nrequires that different data hashes to different values.</p>\n<p>This isn’t completely bug-proof, of course. It’s possible, for\nexample, that <code>Hash</code> always produces the same value unless\nthe input is exactly “Hello, Newman”. We could use fuzz testing to\ntackle this, or just a table test with a bunch of different inputs.</p>\n<p>But you get the point. We made the test both less brittle and less\nfeeble without adding much extra code; all it took was a little extra\n<em>thinking</em>.</p>\n<p>In the next and final post in this series, we’ll look at speed and\nreliability of tests. If the test suite as a whole is too slow, it\nsimply won’t be run, so it’s no use. On the other hand, if the tests are\nunreliable, and often fail even when the code is correct, they’re also\nuseless in a different way. Let’s talk about how to fix that situation\nnext time.</p>","flags":null,"enclosureUrl":"","enclosureMime":""}]}
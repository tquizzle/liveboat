{"id":"82kPqomaPXmNomrHzpZWfbkQxiiNUBTAYKxHR5qZBEpf","title":"Hacker News: Show HN","displayTitle":"HN Show","url":"https://hnrss.org/show?points=60","feedLink":"https://news.ycombinator.com/shownew","isQuery":false,"isEmpty":false,"isHidden":false,"items":[{"title":"Show HN: New search engine and free-FOIA-by-fax-via-web for US veteran records","url":"https://www.birls.org/","date":1736742126,"author":"Asparagirl","unread":true,"content":"\n<p>Hi HN. I'm the president and founder of a small non-profit called Reclaim The Records that identifies historical and genealogical materials and data sets held by government agencies, archives, and libraries -- and then returns them to the public domain, for free public use.<p>Back in September 2017, our organization made a Freedom of Information Act (FOIA) request to the US Department of Veterans Affairs (the VA) asking for a copy of a database they maintain called \"BIRLS\", which stands for the Beneficiary Identification Records Locator Subsystem. While it's not exactly an index of every single post-Civil-War veteran of every branch of the US military, it's possibly the closest thing that exists to it.<p>BIRLS is a database that indexes all the known-to-the-VA-in-or-after-the-1970s *<i>veterans' benefits claims files*</i>, also called C-Files or sometimes XC-Files. Older veterans' claims files have been moved to the National Archives (NARA), such as the famous Civil War pension files. But 95% of the later benefits claim files, from the late nineteenth century up to today, are still held at the VA, in their warehouses, and still haven't been sent to NARA.<p>And even if you know these files exist, the VA really doesn't make it easy to get them. The Veterans Benefits Administration (VBA) group within the VA only seems to accept FOIA requests for copies of C-Files by fax (!) and also seems to have made up a whole new rule whereby you have to have an actual wet ink signature on your FOIA request, not just a typed letter.<p>Well, seven years and one very successful FOIA lawsuit in SDNY against the VA later, we at Reclaim The Records are very proud to announce the acquisition and first-ever free public release of the BIRLS database, AND that we built a new website to make the data freely and easily searchable AND that we even built a free FOIA-by-FAX-API system (with a signature widget, to get around the dumb new not-FOIA rules!) built into our website's search results, that makes it much, much easier for people to finally get these files out of the VA warehouses and into your mailbox. :-)<p>We also added the ability to do searches through the data for soundalike names, abbreviated names, common nicknames, wildcards, searches by date of birth or death, or ranges of birth and death years, or search by SSN, or by branch(es) of services, or by gender...<p>For a lot more information about our FOIA lawsuit against the VA for the database, including copies of our court papers and the SDNY judge's order:<p><a href=\"https://mailchi.mp/reclaimtherecords/the-birls-database-goes-online-with-eighteen-million-us-veteran-records-and-free-foia-by-fax-system\" rel=\"nofollow\">https://mailchi.mp/reclaimtherecords/the-birls-database-goes...</a><p>As for the tech stuff, actually building the website, the search engine, and its FOIAing capability...well, it has been a pretty fun project to build.<p>The BIRLS dataset was eventually provided to us by the VA (several years after we originally asked for it...) as a large zip file which, when decompressed via the command line, yielded the hilarious file name of *<i>Redacted_Full.csv*</i>. I then loaded the cleaned CSV data into a MySQL database, and then used a modified version of the Apache Solr search engine to index the data, so that it could become searchable by soundalike names (using Beider-Morse Phonetic Matching), nicknames (using Solr's synonyms feature), partial names (using wildcards), with dates converted to ISO 8601 format to enable both exact date and date range searches, and various other search criteria.<p>The front-end of the website is built with Nuxt and hosted on Digital Ocean's App Platform, with backups of the FOIA request data on the cloud storage service Wasabi. The fax interface for submitting FOIA requests is powered by the Notifyre API. We use Mailchimp to send e-mail newsletters, and their product Mandrill for programmatic e-mail sending. We use Sentry for error monitoring, Better Stack for server logging, and TinyBird to collect FOIA submission analytics.<p>Enjoy!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42680048\">https://news.ycombinator.com/item?id=42680048</a></p>\n<p>Points: 105</p>\n<p># Comments: 63</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Doom (1993) in a PDF","url":"https://doompdf.pages.dev/doom.pdf","date":1736729443,"author":"vk6","unread":true,"content":"\n<p>I made a Doom source port that runs within a PDF file.<p>I was inspired by the recent HN post about Tetris in a PDF (<a href=\"https://news.ycombinator.com/item?id=42645218\">https://news.ycombinator.com/item?id=42645218</a>) and I wondered if I could get Doom to run using a similar method.<p>It turns out that old versions of Emscripten can compile C to asm.js code that will happily run inside the limited JS runtime of the PDF engine. I used the doomgeneric (<a href=\"https://github.com/ozkl/doomgeneric\">https://github.com/ozkl/doomgeneric</a>) fork of the original Doom source, as that made writing the IO fairly easy. All I had to do was implement a framebuffer and keyboard inputs.<p>Unlike previous interactive PDF demos, the output for DoomPDF is achieved by creating a text field for each row of pixels in the screen, then setting their contents to various ASCII characters. This gives me a 6 color monochrome display, that can be updated reasonably quickly (80ms per frame).<p>The source code is available at: <a href=\"https://github.com/ading2210/doompdf\">https://github.com/ading2210/doompdf</a><p>Note that this PDF can only run in Chromium-based browsers that use the PDFium engine.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42678754\">https://news.ycombinator.com/item?id=42678754</a></p>\n<p>Points: 320</p>\n<p># Comments: 60</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Werk, a simple build tool and command runner","url":"https://simonask.github.io/introducing-werk/","date":1736682056,"author":"simonask","unread":true,"content":"\n<p>I made this for my personal workflow, but I'd love to get feedback from the community.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42672863\">https://news.ycombinator.com/item?id=42672863</a></p>\n<p>Points: 66</p>\n<p># Comments: 10</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: TypeScript/React/Vue Window Layout Manager (Tabs, Floating, Popouts)","url":"https://github.com/mathuo/dockview","date":1736609463,"author":"mathuo","unread":true,"content":"\n<p>Article URL: <a href=\"https://github.com/mathuo/dockview\">https://github.com/mathuo/dockview</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42666492\">https://news.ycombinator.com/item?id=42666492</a></p>\n<p>Points: 328</p>\n<p># Comments: 61</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: A Better Log Service","url":"https://txtlog.net/","date":1736606092,"author":"williebeek","unread":true,"content":"\n<p>Hello everyone, there are many log services available and this is my attempt at a better one.<p>Most online logging tools feature convoluted UIs, arbitrary mandatory fields, questionable AI/insights, complex pricing, etc. I hope my application fixes most of these issues. It also has some nice features, such as automatic Geo IP checks and public dashboards.<p>Although I've created lots of software, this is my first open source application (MIT license), the tutorial for selfhosting is hopefully sufficient! Most of my development career has been with C#, NodeJS and PHP. For this project I've used PHP (8.3) which is an absolute joy to work with. The architecture is very scalable, but I've only tested up to a few billion logs. The current version is used in production for a few months now. Hope you enjoy/fork it as you see fit!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42666139\">https://news.ycombinator.com/item?id=42666139</a></p>\n<p>Points: 150</p>\n<p># Comments: 87</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: 3D Terrain simulation for hiking, skiing etc.","url":"https://github.com/r-follador/CubeTrek","date":1736543322,"author":"folli","unread":true,"content":"\n<p>I'm working on a GPS track visualizer for quite some time. It shines in hilly and mountaineous terrain (where a 3D view makes more sense), but it also offers quite a lot of Strava-like features (statistics etc.).<p>You can upload your GPX and FIT files manually, or sync directly with Garmin, Coros and Polar.<p>See <a href=\"https://cubetrek.com\" rel=\"nofollow\">https://cubetrek.com</a> for the live app and check out some examples there. It's free and opens source.<p>Also, anyone who likes to work with 3D visualizations (especially Babylon.js), let me know if you like to help polish this thing further.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42660255\">https://news.ycombinator.com/item?id=42660255</a></p>\n<p>Points: 146</p>\n<p># Comments: 60</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Freeact â€“ A Lightweight Library for Code-Action Based Agents","url":"https://github.com/gradion-ai/freeact","date":1736527442,"author":"cstub","unread":true,"content":"\n<p>Hello! We just released freeact (<a href=\"https://github.com/gradion-ai/freeact\">https://github.com/gradion-ai/freeact</a>), a lightweight agent library that empowers language models to act as autonomous agents through executable code actions.<p>By enabling agents to express their actions directly in code rather than through constrained formats like JSON, freeact provides a flexible and powerful approach to solving complex, open-ended problems that require dynamic solution paths.<p>* Supports dynamic installation and utilization of Python packages at runtime<p>* Agents learn from feedback and store successful code actions as reusable skills in long-term memory<p>* Skills can be interactively developed and refined in collaboration with freeact agents<p>* Agents compose skills and any other Python modules to build increasingly sophisticated capabilities<p>* Code actions are executed in ipybox (<a href=\"https://github.com/gradion-ai/ipybox\">https://github.com/gradion-ai/ipybox</a>), a secure Docker + IPython sandbox that runs locally or remotely<p>GitHub repo: <a href=\"https://github.com/gradion-ai/freeact\">https://github.com/gradion-ai/freeact</a><p>Evaluation: <a href=\"https://gradion-ai.github.io/freeact/evaluation/\" rel=\"nofollow\">https://gradion-ai.github.io/freeact/evaluation/</a><p>See it in action: <a href=\"https://github.com/user-attachments/assets/83cec179-54dc-456c-b647-ea98ec99600b\">https://github.com/user-attachments/assets/83cec179-54dc-456...</a><p>We'd love to hear your feedback!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42657253\">https://news.ycombinator.com/item?id=42657253</a></p>\n<p>Points: 122</p>\n<p># Comments: 5</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Boulette - Protect you from yourself (even as root).","url":"https://github.com/pipelight/boulette","date":1736518403,"author":"jean_dupont","unread":true,"content":"\n<p>Article URL: <a href=\"https://github.com/pipelight/boulette\">https://github.com/pipelight/boulette</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42655708\">https://news.ycombinator.com/item?id=42655708</a></p>\n<p>Points: 73</p>\n<p># Comments: 84</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Ultra-portable Gantt chart tool for very regulated environments","url":"https://github.com/aerugo/simplegantt","date":1736442711,"author":"aerugo_","unread":true,"content":"\n<p>I work for government agency with a lot of security considerations. We can't install anything and using public webapps is out of the question. Going through clearance or procurement to buy or install something is a pain.<p>I needed a project management tool, and what we had on offer was too clunky and old. I built SimpleGantt to be ultra lightweight and portable. It's one HTML, one Javascript and one CSS file. Each project is saved into a single .yaml file.<p>If you have a SharePoint environment you can \"host\" it by uploading the repo to SharePoint after renaming simplegantt.html to simplegantt.aspx. That allows anyone with access to open the tool by simply having the URL.<p>Try it at: <a href=\"https://aerugo.github.io/simplegantt/simplegantt\" rel=\"nofollow\">https://aerugo.github.io/simplegantt/simplegantt</a><p>This is a couple of days of tinkering, and mostly exists to keep me from going crazy while managing projects with lots of deadlines and dependencies, so don't expect much. But another person in the same position, finding this might lead to calmer days.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42647668\">https://news.ycombinator.com/item?id=42647668</a></p>\n<p>Points: 103</p>\n<p># Comments: 20</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: TabPFN v2 â€“ A SOTA foundation model for small tabular data","url":"https://www.nature.com/articles/s41586-024-08328-6/link","date":1736440706,"author":"onasta","unread":true,"content":"\n<p>I am excited to announce the release of TabPFN v2, a tabular foundation model that delivers state-of-the-art predictions on small datasets in just 2.8 seconds for classification and 4.8 seconds for regression compared to strong baselines tuned for 4 hours. Published in Nature, this model outperforms traditional methods on datasets with up to 10,000 samples and 500 features.<p>The model is available under an open license: a derivative of the Apache 2 license with a single modification, adding an enhanced attribution requirement inspired by the Llama 3 license: <a href=\"https://github.com/PriorLabs/tabpfn\">https://github.com/PriorLabs/tabpfn</a>. You can also try it via API: <a href=\"https://github.com/PriorLabs/tabpfn-client\">https://github.com/PriorLabs/tabpfn-client</a><p>TabPFN v2 is trained on 130 million synthetic tabular prediction datasets to perform in-context learning and output a predictive distribution for the test data points. Each dataset acts as one meta-datapoint to train the TabPFN weights with SGD. As a foundation model, TabPFN allows for fine-tuning, density estimation and data generation.<p>Compared to TabPFN v1, v2 now natively supports categorical features and missing values. TabPFN v2 performs just as well on datasets with or without these. It also handles outliers and uninformative features naturally, problems that often throw off standard neural nets.<p>TabPFN v2 performs as well with half the data as the next best baseline (CatBoost) with all the data.<p>We also compared TabPFN to the SOTA AutoML system AutoGluon 1.0. Standard TabPFN already outperforms AutoGluon on classification and ties on regression, but ensembling multiple TabPFNs in TabPFN v2 (PHE) is even better.<p>There are some limitations: TabPFN v2 is very fast to train and does not require hyperparameter tuning, but inference is slow. The model is also only designed for datasets up to 10k data points and 500 features. While it may perform well on larger datasets, it hasn't been our focus.<p>We're actively working on removing these limitations and intend to release new versions of TabPFN that can handle larger datasets, have faster inference and perform in additional predictive settings such as time-series and recommender systems.<p>We would love for you to try out TabPFN v2 and give us your feedback!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42647343\">https://news.ycombinator.com/item?id=42647343</a></p>\n<p>Points: 149</p>\n<p># Comments: 44</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Kate's App","url":"https://katesapp.org/hn","date":1736438621,"author":"bhpreece","unread":true,"content":"\n<p>Caregiving is a natural, human act of compassion and caring, and most of us, at some point, will rely on someone to help us with our health care (> 70%) or be tasked with helping someone else (> 10%).<p>Kate's App is a tool to coordinate doctor contact information, prescriptions, pharmacies, appointments, notes, and other information with family and caregivers, and do it safely and privately. This is not a clinic portal, and is not associated with any insurance or medical providers.<p>The app is 95% complete, and is entirely usable as is (for any interested beta users).  I intend to clean up the rest of it, and go GA within a few weeks. In the meantime, I would love to answer any questions or hear helpful critiques.<p>BTW, Show HN is the best.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42646922\">https://news.ycombinator.com/item?id=42646922</a></p>\n<p>Points: 159</p>\n<p># Comments: 176</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: LA Wildfire Satellite Analysis","url":"https://github.com/xingyzt/fire","date":1736395716,"author":"xingyzt","unread":true,"content":"\n<p>Article URL: <a href=\"https://github.com/xingyzt/fire\">https://github.com/xingyzt/fire</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42641530\">https://news.ycombinator.com/item?id=42641530</a></p>\n<p>Points: 116</p>\n<p># Comments: 59</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Stagehand â€“ an open source browser automation framework powered by AI","url":"https://github.com/browserbase/stagehand","date":1736354464,"author":"hackgician","unread":true,"content":"\n<p>Hi HN! Iâ€™m Anirudh â€” longtime lurker, first time poster, and I couldnâ€™t be more excited to show you Stagehand.<p>Stagehand is a TypeScript project that extends Playwright with three simple AI methods â€” act, extract, and observe. Weâ€™d love for you to try it out using the command below:<p><pre><code>    npx create-browser-app --example quickstart\n</code></pre>\nHereâ€™s a sample workflow:<p><pre><code>    const stagehand = new Stagehand();\n    await stagehand.init();\n\n    // Stagehand overrides the Playwright Page and Context classes\n    const { page, context } = stagehand\n\n    await page.goto(\"instadash.com\") // Regular Playwright\n\n    // Take action on the page\n    await page.act({ action: \"click on taqueria cazadores\" })\n\n    // Extract relevant data from the page\n    const { price } = await page.extract({\n        instruction: \"extract the price of the super burrito\",\n        schema: z.object({\n            price: z.number()\n        })\n    })\n\n</code></pre>\nWe built Stagehand because we loved building browser automations using Playwright and Selenium, but we grew frustrated at how cumbersome it is to just get started and write simple browser automations. These frameworks, while incredibly powerful, are built for QA testing and are thus notoriously prone to fail if there are minor changes in the UI or underlying DOM structure.<p>The goal of Stagehand is twofold:<p>1. Make browser automations easier to write\n2. Make browser automations more resilient to DOM changes.<p>We were super energized by what weâ€™ve been seeing with vision-based computer use agents. We think with a browser, you can provide even richer data by leveraging the information in the DOM + a11y tree in addition to whatâ€™s rendered on the page. However, we didnâ€™t want to go so far as to build an agent, since we wanted fine-grained control over each step that an agent can take.<p>Therefore, the happy medium we built was to extend the existing powerful functionalities of Playwright with simple and extensible AI APIs that return the decision-making power back to the developer at each step.<p>Check out our docs: <a href=\"https://docs.stagehand.dev\" rel=\"nofollow\">https://docs.stagehand.dev</a><p>Weâ€™d love for you to join and give us feedback on Slack as well: <a href=\"https://stagehand.dev/slack\" rel=\"nofollow\">https://stagehand.dev/slack</a></p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42635942\">https://news.ycombinator.com/item?id=42635942</a></p>\n<p>Points: 323</p>\n<p># Comments: 83</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Cardstock- Free TCG Proxy Manager for Magic, Yugioh, & Pokemon","url":"https://cardstock.denta.co/","date":1736349101,"author":"adenta","unread":true,"content":"\n<p>Trading cards are awesome, but paying $30 for some cardboard isnâ€™t. Iâ€™ve upscaled 60,000 cards from the entire catalog of Yugioh, Magic, Pokemon, & a newer game, <a href=\"https://elestrals.com\" rel=\"nofollow\">https://elestrals.com</a>. I've made it easy to build a decklist, download it, and then print at home. Modern inkjet printers got really good when nobody was looking. While itâ€™s clear theyâ€™re not real cards, the upscaling makes them look great for casual play (these are not tournament legal). Itâ€™s totally free, give it a try!<p>Supplies: <a href=\"https://cardstock.denta.co/kb/supplies\" rel=\"nofollow\">https://cardstock.denta.co/kb/supplies</a>\nPrinter Settings: <a href=\"https://cardstock.denta.co/kb/settings\" rel=\"nofollow\">https://cardstock.denta.co/kb/settings</a>\nInstructions: <a href=\"https://cardstock.denta.co/kb/instructions\" rel=\"nofollow\">https://cardstock.denta.co/kb/instructions</a><p>Overview: I built Cardstock because I had some scripts to do this lying around, and wanted to explore the new Rails 8 magic. Kamal 2 (kamal-deploy.org/) is a game changer, SQLite in production is fine, and the database backed solid family of gems work like a charm.<p>Compute: I am renting a box on <a href=\"https://hetzner.com\" rel=\"nofollow\">https://hetzner.com</a> located in VA for $15/mo. This box has 8 gigs of ram and 2 vCPU's. This is such a deal compared to compute prices on <a href=\"https://render.com\" rel=\"nofollow\">https://render.com</a>.<p>Kamal 2: This thing is amazing. Kamal gives me everything I could want (easy console access, easy shell access, a way to manage secrets, a way to see my logs, and letsencrypt support for DNS), all without a PaaS tax. The best part is the accessories feature: <a href=\"https://kamal-deploy.org/docs/commands/accessory/\" rel=\"nofollow\">https://kamal-deploy.org/docs/commands/accessory/</a>. I am running my main app with two accessories: Meilisearch(<a href=\"https://meilisearch.com\" rel=\"nofollow\">https://meilisearch.com</a>) and OpenObserve (<a href=\"https://openobserve.ai\" rel=\"nofollow\">https://openobserve.ai</a>). Instead of paying Algolia to host search infrastructure and sentry to host monitoring infrastructure, Iâ€™m hosting my own OSS without any fanfare.<p>Upscaling: To upscale the trading cards (a mandatory part of this build, scans are never high enough DPI). I am using this (<a href=\"https://replicate.com/nightmareai/real-esrgan\">https://replicate.com/nightmareai/real-esrgan</a>) model. For upscaling every card, I've used under a hundred bucks of compute. This model was picked on a whim, but worked well enough that I didnâ€™t compare other models.<p>SQLite: I used SQLite combined with Litestream (litestream.io) for my database. While I considered Postgres, I hesitated due to uncertainties around handling backups on self-hosted infrastructure. This was my first time using SQLite in production, and it was functional but with some minor annoyances. Hereâ€™s what I encountered: 1. No Default UUID Primary Key Type I had to set primary keys as strings and assign IDs manually from the application record. Itâ€™s an annoying workaround but manageable. 2. No Native Array Columns Because SQLite doesnâ€™t support array columns, I had to use its native JSON column type, which just felt icky. If I were working with something like embeddings, this would be especially annoying, because you couldnâ€™t enforce all the records to have the same number of dimensions. 3. Cryptic Errors At one point, a migration failed silently, leaving a cryptic error in schema.rb. The issue was resolved by rolling back the migration and redoing it, but it was once again, annoying. 4. Litestream Defaults Litestream deletes snapshots after 24 hours by default, which is far too short. When I tried to recover some data, I found it had already been deleted. Adjusting these defaults fixed the problem.<p>Solid Queue/Cache/Cable: The solid family of gems are all backed by the database and were a pleasure to work with. Goal was to prevent needing to reach for redis, so you have one less thing to worry about. You end up with a little more latency, which is a totally reasonable tradeoff.<p>Conclusions: We are moving into a post platform as a service world. Instead of buying a bespoke render.com or heroku, you just buy commodity compute and use Kamal to manage. It's like, pretty much all there, excited to see how this space matures.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42635049\">https://news.ycombinator.com/item?id=42635049</a></p>\n<p>Points: 68</p>\n<p># Comments: 45</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Belshazzar's Clock, luminous paint night clock","url":"https://blog.karliner.net/projects/belshazzars-clock/","date":1736334860,"author":"mkarliner","unread":true,"content":"\n<p>Article URL: <a href=\"https://blog.karliner.net/projects/belshazzars-clock/\">https://blog.karliner.net/projects/belshazzars-clock/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42633035\">https://news.ycombinator.com/item?id=42633035</a></p>\n<p>Points: 73</p>\n<p># Comments: 17</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: HipScript â€“ Run CUDA in the browser with WebAssembly and WebGPU","url":"https://hipscript.lights0123.com/","date":1736264674,"author":"lights0123","unread":true,"content":"\n<p>CUDA is NVIDIA's language for GPU programming, allowing you to mix write CPU and GPU code in C++ in one file. By chaining a few projects that compile CUDA to OpenCL, then Vulkan, then WebGPU, you can experiment with this GPGPU language on any hardware.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42623593\">https://news.ycombinator.com/item?id=42623593</a></p>\n<p>Points: 306</p>\n<p># Comments: 32</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""}]}